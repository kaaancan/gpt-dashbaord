// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ChatCompletionRequestMessageRole.
const (
	ChatCompletionRequestMessageRoleAssistant ChatCompletionRequestMessageRole = "assistant"
	ChatCompletionRequestMessageRoleFunction  ChatCompletionRequestMessageRole = "function"
	ChatCompletionRequestMessageRoleSystem    ChatCompletionRequestMessageRole = "system"
	ChatCompletionRequestMessageRoleUser      ChatCompletionRequestMessageRole = "user"
)

// Defines values for ChatCompletionResponseMessageRole.
const (
	ChatCompletionResponseMessageRoleAssistant ChatCompletionResponseMessageRole = "assistant"
	ChatCompletionResponseMessageRoleFunction  ChatCompletionResponseMessageRole = "function"
	ChatCompletionResponseMessageRoleSystem    ChatCompletionResponseMessageRole = "system"
	ChatCompletionResponseMessageRoleUser      ChatCompletionResponseMessageRole = "user"
)

// Defines values for CreateChatCompletionRequestFunctionCall0.
const (
	CreateChatCompletionRequestFunctionCall0Auto CreateChatCompletionRequestFunctionCall0 = "auto"
	CreateChatCompletionRequestFunctionCall0None CreateChatCompletionRequestFunctionCall0 = "none"
)

// Defines values for CreateChatCompletionRequestModel1.
const (
	CreateChatCompletionRequestModel1Gpt35Turbo        CreateChatCompletionRequestModel1 = "gpt-3.5-turbo"
	CreateChatCompletionRequestModel1Gpt35Turbo0301    CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-0301"
	CreateChatCompletionRequestModel1Gpt35Turbo0613    CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-0613"
	CreateChatCompletionRequestModel1Gpt35Turbo16k     CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-16k"
	CreateChatCompletionRequestModel1Gpt35Turbo16k0613 CreateChatCompletionRequestModel1 = "gpt-3.5-turbo-16k-0613"
	CreateChatCompletionRequestModel1Gpt4              CreateChatCompletionRequestModel1 = "gpt-4"
	CreateChatCompletionRequestModel1Gpt40314          CreateChatCompletionRequestModel1 = "gpt-4-0314"
	CreateChatCompletionRequestModel1Gpt40613          CreateChatCompletionRequestModel1 = "gpt-4-0613"
	CreateChatCompletionRequestModel1Gpt432k           CreateChatCompletionRequestModel1 = "gpt-4-32k"
	CreateChatCompletionRequestModel1Gpt432k0314       CreateChatCompletionRequestModel1 = "gpt-4-32k-0314"
	CreateChatCompletionRequestModel1Gpt432k0613       CreateChatCompletionRequestModel1 = "gpt-4-32k-0613"
)

// Defines values for CreateChatCompletionResponseChoicesFinishReason.
const (
	CreateChatCompletionResponseChoicesFinishReasonContentFilter CreateChatCompletionResponseChoicesFinishReason = "content_filter"
	CreateChatCompletionResponseChoicesFinishReasonFunctionCall  CreateChatCompletionResponseChoicesFinishReason = "function_call"
	CreateChatCompletionResponseChoicesFinishReasonLength        CreateChatCompletionResponseChoicesFinishReason = "length"
	CreateChatCompletionResponseChoicesFinishReasonStop          CreateChatCompletionResponseChoicesFinishReason = "stop"
)

// Defines values for CreateCompletionRequestModel1.
const (
	Babbage002         CreateCompletionRequestModel1 = "babbage-002"
	CodeDavinci002     CreateCompletionRequestModel1 = "code-davinci-002"
	Davinci002         CreateCompletionRequestModel1 = "davinci-002"
	Gpt35TurboInstruct CreateCompletionRequestModel1 = "gpt-3.5-turbo-instruct"
	TextAda001         CreateCompletionRequestModel1 = "text-ada-001"
	TextBabbage001     CreateCompletionRequestModel1 = "text-babbage-001"
	TextCurie001       CreateCompletionRequestModel1 = "text-curie-001"
	TextDavinci001     CreateCompletionRequestModel1 = "text-davinci-001"
	TextDavinci002     CreateCompletionRequestModel1 = "text-davinci-002"
	TextDavinci003     CreateCompletionRequestModel1 = "text-davinci-003"
)

// Defines values for CreateCompletionResponseChoicesFinishReason.
const (
	CreateCompletionResponseChoicesFinishReasonContentFilter CreateCompletionResponseChoicesFinishReason = "content_filter"
	CreateCompletionResponseChoicesFinishReasonLength        CreateCompletionResponseChoicesFinishReason = "length"
	CreateCompletionResponseChoicesFinishReasonStop          CreateCompletionResponseChoicesFinishReason = "stop"
)

// Defines values for CreateEditRequestModel1.
const (
	CodeDavinciEdit001 CreateEditRequestModel1 = "code-davinci-edit-001"
	TextDavinciEdit001 CreateEditRequestModel1 = "text-davinci-edit-001"
)

// Defines values for CreateEditResponseChoicesFinishReason.
const (
	Length CreateEditResponseChoicesFinishReason = "length"
	Stop   CreateEditResponseChoicesFinishReason = "stop"
)

// Defines values for CreateEmbeddingRequestModel1.
const (
	TextEmbeddingAda002 CreateEmbeddingRequestModel1 = "text-embedding-ada-002"
)

// Defines values for CreateFineTuneRequestModel1.
const (
	Ada     CreateFineTuneRequestModel1 = "ada"
	Babbage CreateFineTuneRequestModel1 = "babbage"
	Curie   CreateFineTuneRequestModel1 = "curie"
	Davinci CreateFineTuneRequestModel1 = "davinci"
)

// Defines values for CreateFineTuningJobRequestHyperparametersNEpochs0.
const (
	CreateFineTuningJobRequestHyperparametersNEpochs0Auto CreateFineTuningJobRequestHyperparametersNEpochs0 = "auto"
)

// Defines values for CreateFineTuningJobRequestModel1.
const (
	CreateFineTuningJobRequestModel1Babbage002 CreateFineTuningJobRequestModel1 = "babbage-002"
	CreateFineTuningJobRequestModel1Davinci002 CreateFineTuningJobRequestModel1 = "davinci-002"
	CreateFineTuningJobRequestModel1Gpt35Turbo CreateFineTuningJobRequestModel1 = "gpt-3.5-turbo"
)

// Defines values for CreateImageEditRequestResponseFormat.
const (
	CreateImageEditRequestResponseFormatB64Json CreateImageEditRequestResponseFormat = "b64_json"
	CreateImageEditRequestResponseFormatUrl     CreateImageEditRequestResponseFormat = "url"
)

// Defines values for CreateImageEditRequestSize.
const (
	CreateImageEditRequestSizeN1024x1024 CreateImageEditRequestSize = "1024x1024"
	CreateImageEditRequestSizeN256x256   CreateImageEditRequestSize = "256x256"
	CreateImageEditRequestSizeN512x512   CreateImageEditRequestSize = "512x512"
)

// Defines values for CreateImageRequestResponseFormat.
const (
	CreateImageRequestResponseFormatB64Json CreateImageRequestResponseFormat = "b64_json"
	CreateImageRequestResponseFormatUrl     CreateImageRequestResponseFormat = "url"
)

// Defines values for CreateImageRequestSize.
const (
	CreateImageRequestSizeN1024x1024 CreateImageRequestSize = "1024x1024"
	CreateImageRequestSizeN256x256   CreateImageRequestSize = "256x256"
	CreateImageRequestSizeN512x512   CreateImageRequestSize = "512x512"
)

// Defines values for CreateImageVariationRequestResponseFormat.
const (
	B64Json CreateImageVariationRequestResponseFormat = "b64_json"
	Url     CreateImageVariationRequestResponseFormat = "url"
)

// Defines values for CreateImageVariationRequestSize.
const (
	N1024x1024 CreateImageVariationRequestSize = "1024x1024"
	N256x256   CreateImageVariationRequestSize = "256x256"
	N512x512   CreateImageVariationRequestSize = "512x512"
)

// Defines values for CreateModerationRequestModel1.
const (
	TextModerationLatest CreateModerationRequestModel1 = "text-moderation-latest"
	TextModerationStable CreateModerationRequestModel1 = "text-moderation-stable"
)

// Defines values for CreateTranscriptionRequestModel1.
const (
	CreateTranscriptionRequestModel1Whisper1 CreateTranscriptionRequestModel1 = "whisper-1"
)

// Defines values for CreateTranscriptionRequestResponseFormat.
const (
	Json        CreateTranscriptionRequestResponseFormat = "json"
	Srt         CreateTranscriptionRequestResponseFormat = "srt"
	Text        CreateTranscriptionRequestResponseFormat = "text"
	VerboseJson CreateTranscriptionRequestResponseFormat = "verbose_json"
	Vtt         CreateTranscriptionRequestResponseFormat = "vtt"
)

// Defines values for CreateTranslationRequestModel1.
const (
	CreateTranslationRequestModel1Whisper1 CreateTranslationRequestModel1 = "whisper-1"
)

// Defines values for FineTuningJobHyperparametersNEpochs0.
const (
	Auto FineTuningJobHyperparametersNEpochs0 = "auto"
)

// Defines values for FineTuningJobEventLevel.
const (
	Error FineTuningJobEventLevel = "error"
	Info  FineTuningJobEventLevel = "info"
	Warn  FineTuningJobEventLevel = "warn"
)

// ChatCompletionFunctionCallOption defines model for ChatCompletionFunctionCallOption.
type ChatCompletionFunctionCallOption struct {
	// Name The name of the function to call.
	Name string `json:"name"`
}

// ChatCompletionFunctionParameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
//
// To describe a function that accepts no parameters, provide the value `{"type": "object", "properties": {}}`.
type ChatCompletionFunctionParameters map[string]interface{}

// ChatCompletionFunctions defines model for ChatCompletionFunctions.
type ChatCompletionFunctions struct {
	// Description A description of what the function does, used by the model to choose when and how to call the function.
	Description *string `json:"description,omitempty"`

	// Name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`

	// Parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	//
	// To describe a function that accepts no parameters, provide the value `{"type": "object", "properties": {}}`.
	Parameters ChatCompletionFunctionParameters `json:"parameters"`
}

// ChatCompletionRequestMessage defines model for ChatCompletionRequestMessage.
type ChatCompletionRequestMessage struct {
	// Content The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls.
	Content *string `json:"content"`

	// FunctionCall The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`

		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function_call,omitempty"`

	// Name The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
	Name *string `json:"name,omitempty"`

	// Role The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
	Role ChatCompletionRequestMessageRole `json:"role"`
}

// ChatCompletionRequestMessageRole The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
type ChatCompletionRequestMessageRole string

// ChatCompletionResponseMessage A chat completion message generated by the model.
type ChatCompletionResponseMessage struct {
	// Content The contents of the message.
	Content *string `json:"content"`

	// FunctionCall The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *struct {
		// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
		Arguments string `json:"arguments"`

		// Name The name of the function to call.
		Name string `json:"name"`
	} `json:"function_call,omitempty"`

	// Role The role of the author of this message.
	Role ChatCompletionResponseMessageRole `json:"role"`
}

// ChatCompletionResponseMessageRole The role of the author of this message.
type ChatCompletionResponseMessageRole string

// CompletionUsage Usage statistics for the completion request.
type CompletionUsage struct {
	// CompletionTokens Number of tokens in the generated completion.
	CompletionTokens int `json:"completion_tokens"`

	// PromptTokens Number of tokens in the prompt.
	PromptTokens int `json:"prompt_tokens"`

	// TotalTokens Total number of tokens used in the request (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// CreateChatCompletionRequest defines model for CreateChatCompletionRequest.
type CreateChatCompletionRequest struct {
	// FrequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
	FrequencyPenalty *float32 `json:"frequency_penalty"`

	// FunctionCall Controls how the model responds to function calls. `none` means the model does not call a function, and responds to the end-user. `auto` means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name": "my_function"}` forces the model to call that function. `none` is the default when no functions are present. `auto` is the default if functions are present.
	FunctionCall *CreateChatCompletionRequest_FunctionCall `json:"function_call,omitempty"`

	// Functions A list of functions the model may generate JSON inputs for.
	Functions *[]ChatCompletionFunctions `json:"functions,omitempty"`

	// LogitBias Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	LogitBias *map[string]int `json:"logit_bias"`

	// MaxTokens The maximum number of [tokens](/tokenizer) to generate in the chat completion.
	//
	// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
	MaxTokens *int `json:"max_tokens"`

	// Messages A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
	Messages []ChatCompletionRequestMessage `json:"messages"`

	// Model ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
	Model CreateChatCompletionRequest_Model `json:"model"`

	// N How many chat completion choices to generate for each input message.
	N *int `json:"n"`

	// PresencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
	PresencePenalty *float32 `json:"presence_penalty"`

	// Stop Up to 4 sequences where the API will stop generating further tokens.
	Stop *CreateChatCompletionRequest_Stop `json:"stop,omitempty"`

	// Stream If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
	Stream *bool `json:"stream"`

	// Temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `json:"temperature"`

	// TopP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateChatCompletionRequestFunctionCall0 defines model for CreateChatCompletionRequest.FunctionCall.0.
type CreateChatCompletionRequestFunctionCall0 string

// CreateChatCompletionRequest_FunctionCall Controls how the model responds to function calls. `none` means the model does not call a function, and responds to the end-user. `auto` means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name": "my_function"}` forces the model to call that function. `none` is the default when no functions are present. `auto` is the default if functions are present.
type CreateChatCompletionRequest_FunctionCall struct {
	union json.RawMessage
}

// CreateChatCompletionRequestModel0 defines model for .
type CreateChatCompletionRequestModel0 = string

// CreateChatCompletionRequestModel1 defines model for CreateChatCompletionRequest.Model.1.
type CreateChatCompletionRequestModel1 string

// CreateChatCompletionRequest_Model ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
type CreateChatCompletionRequest_Model struct {
	union json.RawMessage
}

// CreateChatCompletionRequestStop0 defines model for .
type CreateChatCompletionRequestStop0 = string

// CreateChatCompletionRequestStop1 defines model for .
type CreateChatCompletionRequestStop1 = []string

// CreateChatCompletionRequest_Stop Up to 4 sequences where the API will stop generating further tokens.
type CreateChatCompletionRequest_Stop struct {
	union json.RawMessage
}

// CreateChatCompletionResponse Represents a chat completion response returned by model, based on the provided input.
type CreateChatCompletionResponse struct {
	// Choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// `content_filter` if content was omitted due to a flag from our content filters,
		// or `function_call` if the model called a function.
		FinishReason CreateChatCompletionResponseChoicesFinishReason `json:"finish_reason"`

		// Index The index of the choice in the list of choices.
		Index int `json:"index"`

		// Message A chat completion message generated by the model.
		Message ChatCompletionResponseMessage `json:"message"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the chat completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the chat completion.
	Id string `json:"id"`

	// Model The model used for the chat completion.
	Model string `json:"model"`

	// Object The object type, which is always `chat.completion`.
	Object string `json:"object"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// CreateChatCompletionResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// `content_filter` if content was omitted due to a flag from our content filters,
// or `function_call` if the model called a function.
type CreateChatCompletionResponseChoicesFinishReason string

// CreateCompletionRequest defines model for CreateCompletionRequest.
type CreateCompletionRequest struct {
	// BestOf Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
	//
	// When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
	//
	// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	BestOf *int `json:"best_of"`

	// Echo Echo back the prompt in addition to the completion
	Echo *bool `json:"echo"`

	// FrequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
	FrequencyPenalty *float32 `json:"frequency_penalty"`

	// LogitBias Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	//
	// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
	LogitBias *map[string]int `json:"logit_bias"`

	// Logprobs Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
	//
	// The maximum value for `logprobs` is 5.
	Logprobs *int `json:"logprobs"`

	// MaxTokens The maximum number of [tokens](/tokenizer) to generate in the completion.
	//
	// The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
	MaxTokens *int `json:"max_tokens"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model CreateCompletionRequest_Model `json:"model"`

	// N How many completions to generate for each prompt.
	//
	// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	N *int `json:"n"`

	// PresencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
	PresencePenalty *float32 `json:"presence_penalty"`

	// Prompt The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
	//
	// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
	Prompt *CreateCompletionRequest_Prompt `json:"prompt"`

	// Stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
	Stop *CreateCompletionRequest_Stop `json:"stop"`

	// Stream Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
	Stream *bool `json:"stream"`

	// Suffix The suffix that comes after a completion of inserted text.
	Suffix *string `json:"suffix"`

	// Temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `json:"temperature"`

	// TopP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateCompletionRequestModel0 defines model for .
type CreateCompletionRequestModel0 = string

// CreateCompletionRequestModel1 defines model for CreateCompletionRequest.Model.1.
type CreateCompletionRequestModel1 string

// CreateCompletionRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type CreateCompletionRequest_Model struct {
	union json.RawMessage
}

// CreateCompletionRequestPrompt0 defines model for .
type CreateCompletionRequestPrompt0 = string

// CreateCompletionRequestPrompt1 defines model for .
type CreateCompletionRequestPrompt1 = []string

// CreateCompletionRequestPrompt2 defines model for .
type CreateCompletionRequestPrompt2 = []int

// CreateCompletionRequestPrompt3 defines model for .
type CreateCompletionRequestPrompt3 = [][]int

// CreateCompletionRequest_Prompt The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
//
// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
type CreateCompletionRequest_Prompt struct {
	union json.RawMessage
}

// CreateCompletionRequestStop0 defines model for .
type CreateCompletionRequestStop0 = string

// CreateCompletionRequestStop1 defines model for .
type CreateCompletionRequestStop1 = []string

// CreateCompletionRequest_Stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
type CreateCompletionRequest_Stop struct {
	union json.RawMessage
}

// CreateCompletionResponse Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
type CreateCompletionResponse struct {
	// Choices The list of completion choices the model generated for the input prompt.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// or `content_filter` if content was omitted due to a flag from our content filters.
		FinishReason CreateCompletionResponseChoicesFinishReason `json:"finish_reason"`
		Index        int                                         `json:"index"`
		Logprobs     *struct {
			TextOffset    *[]int            `json:"text_offset,omitempty"`
			TokenLogprobs *[]float32        `json:"token_logprobs,omitempty"`
			Tokens        *[]string         `json:"tokens,omitempty"`
			TopLogprobs   *[]map[string]int `json:"top_logprobs,omitempty"`
		} `json:"logprobs"`
		Text string `json:"text"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the completion.
	Id string `json:"id"`

	// Model The model used for completion.
	Model string `json:"model"`

	// Object The object type, which is always "text_completion"
	Object string `json:"object"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// CreateCompletionResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// or `content_filter` if content was omitted due to a flag from our content filters.
type CreateCompletionResponseChoicesFinishReason string

// CreateEditRequest defines model for CreateEditRequest.
type CreateEditRequest struct {
	// Input The input text to use as a starting point for the edit.
	Input *string `json:"input"`

	// Instruction The instruction that tells the model how to edit the prompt.
	Instruction string `json:"instruction"`

	// Model ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
	Model CreateEditRequest_Model `json:"model"`

	// N How many edits to generate for the input and instruction.
	N *int `json:"n"`

	// Temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `json:"temperature"`

	// TopP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p"`
}

// CreateEditRequestModel0 defines model for .
type CreateEditRequestModel0 = string

// CreateEditRequestModel1 defines model for CreateEditRequest.Model.1.
type CreateEditRequestModel1 string

// CreateEditRequest_Model ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
type CreateEditRequest_Model struct {
	union json.RawMessage
}

// CreateEditResponse defines model for CreateEditResponse.
type CreateEditResponse struct {
	// Choices A list of edit choices. Can be more than one if `n` is greater than 1.
	Choices []struct {
		// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
		// `length` if the maximum number of tokens specified in the request was reached,
		// or `content_filter` if content was omitted due to a flag from our content filters.
		FinishReason CreateEditResponseChoicesFinishReason `json:"finish_reason"`

		// Index The index of the choice in the list of choices.
		Index int `json:"index"`

		// Text The edited result.
		Text string `json:"text"`
	} `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the edit was created.
	Created int `json:"created"`

	// Object The object type, which is always `edit`.
	Object string `json:"object"`

	// Usage Usage statistics for the completion request.
	Usage CompletionUsage `json:"usage"`
}

// CreateEditResponseChoicesFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// or `content_filter` if content was omitted due to a flag from our content filters.
type CreateEditResponseChoicesFinishReason string

// CreateEmbeddingRequest defines model for CreateEmbeddingRequest.
type CreateEmbeddingRequest struct {
	// Input Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`) and cannot be an empty string. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
	Input CreateEmbeddingRequest_Input `json:"input"`

	// Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	Model CreateEmbeddingRequest_Model `json:"model"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateEmbeddingRequestInput0 defines model for .
type CreateEmbeddingRequestInput0 = string

// CreateEmbeddingRequestInput1 defines model for .
type CreateEmbeddingRequestInput1 = []string

// CreateEmbeddingRequestInput2 defines model for .
type CreateEmbeddingRequestInput2 = []int

// CreateEmbeddingRequestInput3 defines model for .
type CreateEmbeddingRequestInput3 = [][]int

// CreateEmbeddingRequest_Input Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`) and cannot be an empty string. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
type CreateEmbeddingRequest_Input struct {
	union json.RawMessage
}

// CreateEmbeddingRequestModel0 defines model for .
type CreateEmbeddingRequestModel0 = string

// CreateEmbeddingRequestModel1 defines model for CreateEmbeddingRequest.Model.1.
type CreateEmbeddingRequestModel1 string

// CreateEmbeddingRequest_Model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type CreateEmbeddingRequest_Model struct {
	union json.RawMessage
}

// CreateEmbeddingResponse defines model for CreateEmbeddingResponse.
type CreateEmbeddingResponse struct {
	// Data The list of embeddings generated by the model.
	Data []Embedding `json:"data"`

	// Model The name of the model used to generate the embedding.
	Model string `json:"model"`

	// Object The object type, which is always "embedding".
	Object string `json:"object"`

	// Usage The usage information for the request.
	Usage struct {
		// PromptTokens The number of tokens used by the prompt.
		PromptTokens int `json:"prompt_tokens"`

		// TotalTokens The total number of tokens used by the request.
		TotalTokens int `json:"total_tokens"`
	} `json:"usage"`
}

// CreateFileRequest defines model for CreateFileRequest.
type CreateFileRequest struct {
	// File Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.
	//
	// If the `purpose` is set to "fine-tune", the file will be used for fine-tuning.
	File openapi_types.File `json:"file"`

	// Purpose The intended purpose of the uploaded documents.
	//
	// Use "fine-tune" for [fine-tuning](/docs/api-reference/fine-tuning). This allows us to validate the format of the uploaded file.
	Purpose string `json:"purpose"`
}

// CreateFineTuneRequest defines model for CreateFineTuneRequest.
type CreateFineTuneRequest struct {
	// BatchSize The batch size to use for training. The batch size is the number of
	// training examples used to train a single forward and backward pass.
	//
	// By default, the batch size will be dynamically configured to be
	// ~0.2% of the number of examples in the training set, capped at 256 -
	// in general, we've found that larger batch sizes tend to work better
	// for larger datasets.
	BatchSize *int `json:"batch_size"`

	// ClassificationBetas If this is provided, we calculate F-beta scores at the specified
	// beta values. The F-beta score is a generalization of F-1 score.
	// This is only used for binary classification.
	//
	// With a beta of 1 (i.e. the F-1 score), precision and recall are
	// given the same weight. A larger beta score puts more weight on
	// recall and less on precision. A smaller beta score puts more weight
	// on precision and less on recall.
	ClassificationBetas *[]float32 `json:"classification_betas"`

	// ClassificationNClasses The number of classes in a classification task.
	//
	// This parameter is required for multiclass classification.
	ClassificationNClasses *int `json:"classification_n_classes"`

	// ClassificationPositiveClass The positive class in binary classification.
	//
	// This parameter is needed to generate precision, recall, and F1
	// metrics when doing binary classification.
	ClassificationPositiveClass *string `json:"classification_positive_class"`

	// ComputeClassificationMetrics If set, we calculate classification-specific metrics such as accuracy
	// and F-1 score using the validation set at the end of every epoch.
	// These metrics can be viewed in the [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).
	//
	// In order to compute classification metrics, you must provide a
	// `validation_file`. Additionally, you must
	// specify `classification_n_classes` for multiclass classification or
	// `classification_positive_class` for binary classification.
	ComputeClassificationMetrics *bool `json:"compute_classification_metrics"`

	// LearningRateMultiplier The learning rate multiplier to use for training.
	// The fine-tuning learning rate is the original learning rate used for
	// pretraining multiplied by this value.
	//
	// By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
	// depending on final `batch_size` (larger learning rates tend to
	// perform better with larger batch sizes). We recommend experimenting
	// with values in the range 0.02 to 0.2 to see what produces the best
	// results.
	LearningRateMultiplier *float32 `json:"learning_rate_multiplier"`

	// Model The name of the base model to fine-tune. You can select one of "ada",
	// "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21 and before 2023-08-22.
	// To learn more about these models, see the
	// [Models](/docs/models) documentation.
	Model *CreateFineTuneRequest_Model `json:"model"`

	// NEpochs The number of epochs to train the model for. An epoch refers to one
	// full cycle through the training dataset.
	NEpochs *int `json:"n_epochs"`

	// PromptLossWeight The weight to use for loss on the prompt tokens. This controls how
	// much the model tries to learn to generate the prompt (as compared
	// to the completion which always has a weight of 1.0), and can add
	// a stabilizing effect to training when completions are short.
	//
	// If prompts are extremely long (relative to completions), it may make
	// sense to reduce this weight so as to avoid over-prioritizing
	// learning the prompt.
	PromptLossWeight *float32 `json:"prompt_loss_weight"`

	// Suffix A string of up to 40 characters that will be added to your fine-tuned model name.
	//
	// For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
	Suffix *string `json:"suffix"`

	// TrainingFile The ID of an uploaded file that contains training data.
	//
	// See [upload file](/docs/api-reference/files/upload) for how to upload a file.
	//
	// Your dataset must be formatted as a JSONL file, where each training
	// example is a JSON object with the keys "prompt" and "completion".
	// Additionally, you must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.
	TrainingFile string `json:"training_file"`

	// ValidationFile The ID of an uploaded file that contains validation data.
	//
	// If you provide this file, the data is used to generate validation
	// metrics periodically during fine-tuning. These metrics can be viewed in
	// the [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).
	// Your train and validation data should be mutually exclusive.
	//
	// Your dataset must be formatted as a JSONL file, where each validation
	// example is a JSON object with the keys "prompt" and "completion".
	// Additionally, you must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.
	ValidationFile *string `json:"validation_file"`
}

// CreateFineTuneRequestModel0 defines model for .
type CreateFineTuneRequestModel0 = string

// CreateFineTuneRequestModel1 defines model for CreateFineTuneRequest.Model.1.
type CreateFineTuneRequestModel1 string

// CreateFineTuneRequest_Model The name of the base model to fine-tune. You can select one of "ada",
// "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21 and before 2023-08-22.
// To learn more about these models, see the
// [Models](/docs/models) documentation.
type CreateFineTuneRequest_Model struct {
	union json.RawMessage
}

// CreateFineTuningJobRequest defines model for CreateFineTuningJobRequest.
type CreateFineTuningJobRequest struct {
	// Hyperparameters The hyperparameters used for the fine-tuning job.
	Hyperparameters *struct {
		// NEpochs The number of epochs to train the model for. An epoch refers to one
		// full cycle through the training dataset.
		NEpochs *CreateFineTuningJobRequest_Hyperparameters_NEpochs `json:"n_epochs,omitempty"`
	} `json:"hyperparameters,omitempty"`

	// Model The name of the model to fine-tune. You can select one of the
	// [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
	Model CreateFineTuningJobRequest_Model `json:"model"`

	// Suffix A string of up to 18 characters that will be added to your fine-tuned model name.
	//
	// For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.
	Suffix *string `json:"suffix"`

	// TrainingFile The ID of an uploaded file that contains training data.
	//
	// See [upload file](/docs/api-reference/files/upload) for how to upload a file.
	//
	// Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	TrainingFile string `json:"training_file"`

	// ValidationFile The ID of an uploaded file that contains validation data.
	//
	// If you provide this file, the data is used to generate validation
	// metrics periodically during fine-tuning. These metrics can be viewed in
	// the fine-tuning results file.
	// The same data should not be present in both train and validation files.
	//
	// Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	ValidationFile *string `json:"validation_file"`
}

// CreateFineTuningJobRequestHyperparametersNEpochs0 defines model for CreateFineTuningJobRequest.Hyperparameters.NEpochs.0.
type CreateFineTuningJobRequestHyperparametersNEpochs0 string

// CreateFineTuningJobRequestHyperparametersNEpochs1 defines model for .
type CreateFineTuningJobRequestHyperparametersNEpochs1 = int

// CreateFineTuningJobRequest_Hyperparameters_NEpochs The number of epochs to train the model for. An epoch refers to one
// full cycle through the training dataset.
type CreateFineTuningJobRequest_Hyperparameters_NEpochs struct {
	union json.RawMessage
}

// CreateFineTuningJobRequestModel0 defines model for .
type CreateFineTuningJobRequestModel0 = string

// CreateFineTuningJobRequestModel1 defines model for CreateFineTuningJobRequest.Model.1.
type CreateFineTuningJobRequestModel1 string

// CreateFineTuningJobRequest_Model The name of the model to fine-tune. You can select one of the
// [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
type CreateFineTuningJobRequest_Model struct {
	union json.RawMessage
}

// CreateImageEditRequest defines model for CreateImageEditRequest.
type CreateImageEditRequest struct {
	// Image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
	Image openapi_types.File `json:"image"`

	// Mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
	Mask *openapi_types.File `json:"mask,omitempty"`

	// N The number of images to generate. Must be between 1 and 10.
	N *int `json:"n"`

	// Prompt A text description of the desired image(s). The maximum length is 1000 characters.
	Prompt string `json:"prompt"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`.
	ResponseFormat *CreateImageEditRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size *CreateImageEditRequestSize `json:"size"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateImageEditRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`.
type CreateImageEditRequestResponseFormat string

// CreateImageEditRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type CreateImageEditRequestSize string

// CreateImageRequest defines model for CreateImageRequest.
type CreateImageRequest struct {
	// N The number of images to generate. Must be between 1 and 10.
	N *int `json:"n"`

	// Prompt A text description of the desired image(s). The maximum length is 1000 characters.
	Prompt string `json:"prompt"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`.
	ResponseFormat *CreateImageRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size *CreateImageRequestSize `json:"size"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateImageRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`.
type CreateImageRequestResponseFormat string

// CreateImageRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type CreateImageRequestSize string

// CreateImageVariationRequest defines model for CreateImageVariationRequest.
type CreateImageVariationRequest struct {
	// Image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
	Image openapi_types.File `json:"image"`

	// N The number of images to generate. Must be between 1 and 10.
	N *int `json:"n"`

	// ResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`.
	ResponseFormat *CreateImageVariationRequestResponseFormat `json:"response_format"`

	// Size The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size *CreateImageVariationRequestSize `json:"size"`

	// User A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

// CreateImageVariationRequestResponseFormat The format in which the generated images are returned. Must be one of `url` or `b64_json`.
type CreateImageVariationRequestResponseFormat string

// CreateImageVariationRequestSize The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type CreateImageVariationRequestSize string

// CreateModerationRequest defines model for CreateModerationRequest.
type CreateModerationRequest struct {
	// Input The input text to classify
	Input CreateModerationRequest_Input `json:"input"`

	// Model Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
	//
	// The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
	Model *CreateModerationRequest_Model `json:"model,omitempty"`
}

// CreateModerationRequestInput0 defines model for .
type CreateModerationRequestInput0 = string

// CreateModerationRequestInput1 defines model for .
type CreateModerationRequestInput1 = []string

// CreateModerationRequest_Input The input text to classify
type CreateModerationRequest_Input struct {
	union json.RawMessage
}

// CreateModerationRequestModel0 defines model for .
type CreateModerationRequestModel0 = string

// CreateModerationRequestModel1 defines model for CreateModerationRequest.Model.1.
type CreateModerationRequestModel1 string

// CreateModerationRequest_Model Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
//
// The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
type CreateModerationRequest_Model struct {
	union json.RawMessage
}

// CreateModerationResponse Represents policy compliance report by OpenAI's content moderation model against a given input.
type CreateModerationResponse struct {
	// Id The unique identifier for the moderation request.
	Id string `json:"id"`

	// Model The model used to generate the moderation results.
	Model string `json:"model"`

	// Results A list of moderation objects.
	Results []struct {
		// Categories A list of the categories, and whether they are flagged or not.
		Categories struct {
			// Harassment Content that expresses, incites, or promotes harassing language towards any target.
			Harassment bool `json:"harassment"`

			// Harassmentthreatening Harassment content that also includes violence or serious harm towards any target.
			Harassmentthreatening bool `json:"harassment/threatening"`

			// Hate Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harrassment.
			Hate bool `json:"hate"`

			// Hatethreatening Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
			Hatethreatening bool `json:"hate/threatening"`

			// SelfHarm Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
			SelfHarm bool `json:"self-harm"`

			// SelfHarminstructions Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
			SelfHarminstructions bool `json:"self-harm/instructions"`

			// SelfHarmintent Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
			SelfHarmintent bool `json:"self-harm/intent"`

			// Sexual Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
			Sexual bool `json:"sexual"`

			// Sexualminors Sexual content that includes an individual who is under 18 years old.
			Sexualminors bool `json:"sexual/minors"`

			// Violence Content that depicts death, violence, or physical injury.
			Violence bool `json:"violence"`

			// Violencegraphic Content that depicts death, violence, or physical injury in graphic detail.
			Violencegraphic bool `json:"violence/graphic"`
		} `json:"categories"`

		// CategoryScores A list of the categories along with their scores as predicted by model.
		CategoryScores struct {
			// Harassment The score for the category 'harassment'.
			Harassment float32 `json:"harassment"`

			// Harassmentthreatening The score for the category 'harassment/threatening'.
			Harassmentthreatening float32 `json:"harassment/threatening"`

			// Hate The score for the category 'hate'.
			Hate float32 `json:"hate"`

			// Hatethreatening The score for the category 'hate/threatening'.
			Hatethreatening float32 `json:"hate/threatening"`

			// SelfHarm The score for the category 'self-harm'.
			SelfHarm float32 `json:"self-harm"`

			// SelfHarminstructions The score for the category 'self-harm/instructions'.
			SelfHarminstructions float32 `json:"self-harm/instructions"`

			// SelfHarmintent The score for the category 'self-harm/intent'.
			SelfHarmintent float32 `json:"self-harm/intent"`

			// Sexual The score for the category 'sexual'.
			Sexual float32 `json:"sexual"`

			// Sexualminors The score for the category 'sexual/minors'.
			Sexualminors float32 `json:"sexual/minors"`

			// Violence The score for the category 'violence'.
			Violence float32 `json:"violence"`

			// Violencegraphic The score for the category 'violence/graphic'.
			Violencegraphic float32 `json:"violence/graphic"`
		} `json:"category_scores"`

		// Flagged Whether the content violates [OpenAI's usage policies](/policies/usage-policies).
		Flagged bool `json:"flagged"`
	} `json:"results"`
}

// CreateTranscriptionRequest defines model for CreateTranscriptionRequest.
type CreateTranscriptionRequest struct {
	// File The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
	File openapi_types.File `json:"file"`

	// Language The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
	Language *string `json:"language,omitempty"`

	// Model ID of the model to use. Only `whisper-1` is currently available.
	Model CreateTranscriptionRequest_Model `json:"model"`

	// Prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
	Prompt *string `json:"prompt,omitempty"`

	// ResponseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
	ResponseFormat *CreateTranscriptionRequestResponseFormat `json:"response_format,omitempty"`

	// Temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
	Temperature *float32 `json:"temperature,omitempty"`
}

// CreateTranscriptionRequestModel0 defines model for .
type CreateTranscriptionRequestModel0 = string

// CreateTranscriptionRequestModel1 defines model for CreateTranscriptionRequest.Model.1.
type CreateTranscriptionRequestModel1 string

// CreateTranscriptionRequest_Model ID of the model to use. Only `whisper-1` is currently available.
type CreateTranscriptionRequest_Model struct {
	union json.RawMessage
}

// CreateTranscriptionRequestResponseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
type CreateTranscriptionRequestResponseFormat string

// CreateTranscriptionResponse defines model for CreateTranscriptionResponse.
type CreateTranscriptionResponse struct {
	Text string `json:"text"`
}

// CreateTranslationRequest defines model for CreateTranslationRequest.
type CreateTranslationRequest struct {
	// File The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
	File openapi_types.File `json:"file"`

	// Model ID of the model to use. Only `whisper-1` is currently available.
	Model CreateTranslationRequest_Model `json:"model"`

	// Prompt An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
	Prompt *string `json:"prompt,omitempty"`

	// ResponseFormat The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
	ResponseFormat *string `json:"response_format,omitempty"`

	// Temperature The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
	Temperature *float32 `json:"temperature,omitempty"`
}

// CreateTranslationRequestModel0 defines model for .
type CreateTranslationRequestModel0 = string

// CreateTranslationRequestModel1 defines model for CreateTranslationRequest.Model.1.
type CreateTranslationRequestModel1 string

// CreateTranslationRequest_Model ID of the model to use. Only `whisper-1` is currently available.
type CreateTranslationRequest_Model struct {
	union json.RawMessage
}

// CreateTranslationResponse defines model for CreateTranslationResponse.
type CreateTranslationResponse struct {
	Text string `json:"text"`
}

// DeleteFileResponse defines model for DeleteFileResponse.
type DeleteFileResponse struct {
	Deleted bool   `json:"deleted"`
	Id      string `json:"id"`
	Object  string `json:"object"`
}

// DeleteModelResponse defines model for DeleteModelResponse.
type DeleteModelResponse struct {
	Deleted bool   `json:"deleted"`
	Id      string `json:"id"`
	Object  string `json:"object"`
}

// Embedding Represents an embedding vector returned by embedding endpoint.
type Embedding struct {
	// Embedding The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
	Embedding []float32 `json:"embedding"`

	// Index The index of the embedding in the list of embeddings.
	Index int `json:"index"`

	// Object The object type, which is always "embedding".
	Object string `json:"object"`
}

// FineTune The `FineTune` object represents a legacy fine-tune job that has been created through the API.
type FineTune struct {
	// CreatedAt The Unix timestamp (in seconds) for when the fine-tuning job was created.
	CreatedAt int `json:"created_at"`

	// Events The list of events that have been observed in the lifecycle of the FineTune job.
	Events *[]FineTuneEvent `json:"events,omitempty"`

	// FineTunedModel The name of the fine-tuned model that is being created.
	FineTunedModel *string `json:"fine_tuned_model"`

	// Hyperparams The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.
	Hyperparams struct {
		// BatchSize The batch size to use for training. The batch size is the number of
		// training examples used to train a single forward and backward pass.
		BatchSize int `json:"batch_size"`

		// ClassificationNClasses The number of classes to use for computing classification metrics.
		ClassificationNClasses *int `json:"classification_n_classes,omitempty"`

		// ClassificationPositiveClass The positive class to use for computing classification metrics.
		ClassificationPositiveClass *string `json:"classification_positive_class,omitempty"`

		// ComputeClassificationMetrics The classification metrics to compute using the validation dataset at the end of every epoch.
		ComputeClassificationMetrics *bool `json:"compute_classification_metrics,omitempty"`

		// LearningRateMultiplier The learning rate multiplier to use for training.
		LearningRateMultiplier float32 `json:"learning_rate_multiplier"`

		// NEpochs The number of epochs to train the model for. An epoch refers to one
		// full cycle through the training dataset.
		NEpochs int `json:"n_epochs"`

		// PromptLossWeight The weight to use for loss on the prompt tokens.
		PromptLossWeight float32 `json:"prompt_loss_weight"`
	} `json:"hyperparams"`

	// Id The object identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Model The base model that is being fine-tuned.
	Model string `json:"model"`

	// Object The object type, which is always "fine-tune".
	Object string `json:"object"`

	// OrganizationId The organization that owns the fine-tuning job.
	OrganizationId string `json:"organization_id"`

	// ResultFiles The compiled results files for the fine-tuning job.
	ResultFiles []OpenAIFile `json:"result_files"`

	// Status The current status of the fine-tuning job, which can be either `created`, `running`, `succeeded`, `failed`, or `cancelled`.
	Status string `json:"status"`

	// TrainingFiles The list of files used for training.
	TrainingFiles []OpenAIFile `json:"training_files"`

	// UpdatedAt The Unix timestamp (in seconds) for when the fine-tuning job was last updated.
	UpdatedAt int `json:"updated_at"`

	// ValidationFiles The list of files used for validation.
	ValidationFiles []OpenAIFile `json:"validation_files"`
}

// FineTuneEvent defines model for FineTuneEvent.
type FineTuneEvent struct {
	CreatedAt int    `json:"created_at"`
	Level     string `json:"level"`
	Message   string `json:"message"`
	Object    string `json:"object"`
}

// FineTuningJob The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
type FineTuningJob struct {
	// CreatedAt The Unix timestamp (in seconds) for when the fine-tuning job was created.
	CreatedAt int `json:"created_at"`

	// Error For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
	Error *struct {
		// Code A machine-readable error code.
		Code string `json:"code"`

		// Message A human-readable error message.
		Message string `json:"message"`

		// Param The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
		Param *string `json:"param"`
	} `json:"error"`

	// FineTunedModel The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
	FineTunedModel *string `json:"fine_tuned_model"`

	// FinishedAt The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
	FinishedAt *int `json:"finished_at"`

	// Hyperparameters The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	Hyperparameters struct {
		// NEpochs The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
		// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
		NEpochs FineTuningJob_Hyperparameters_NEpochs `json:"n_epochs"`
	} `json:"hyperparameters"`

	// Id The object identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Model The base model that is being fine-tuned.
	Model string `json:"model"`

	// Object The object type, which is always "fine_tuning.job".
	Object string `json:"object"`

	// OrganizationId The organization that owns the fine-tuning job.
	OrganizationId string `json:"organization_id"`

	// ResultFiles The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ResultFiles []string `json:"result_files"`

	// Status The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
	Status string `json:"status"`

	// TrainedTokens The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
	TrainedTokens *int `json:"trained_tokens"`

	// TrainingFile The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
	TrainingFile string `json:"training_file"`

	// ValidationFile The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ValidationFile *string `json:"validation_file"`
}

// FineTuningJobHyperparametersNEpochs0 defines model for FineTuningJob.Hyperparameters.NEpochs.0.
type FineTuningJobHyperparametersNEpochs0 string

// FineTuningJobHyperparametersNEpochs1 defines model for .
type FineTuningJobHyperparametersNEpochs1 = int

// FineTuningJob_Hyperparameters_NEpochs The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
type FineTuningJob_Hyperparameters_NEpochs struct {
	union json.RawMessage
}

// FineTuningJobEvent defines model for FineTuningJobEvent.
type FineTuningJobEvent struct {
	CreatedAt int                     `json:"created_at"`
	Id        string                  `json:"id"`
	Level     FineTuningJobEventLevel `json:"level"`
	Message   string                  `json:"message"`
	Object    string                  `json:"object"`
}

// FineTuningJobEventLevel defines model for FineTuningJobEvent.Level.
type FineTuningJobEventLevel string

// Image Represents the url or the content of an image generated by the OpenAI API.
type Image struct {
	// B64Json The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
	B64Json *string `json:"b64_json,omitempty"`

	// Url The URL of the generated image, if `response_format` is `url` (default).
	Url *string `json:"url,omitempty"`
}

// ImagesResponse defines model for ImagesResponse.
type ImagesResponse struct {
	Created int     `json:"created"`
	Data    []Image `json:"data"`
}

// ListFilesResponse defines model for ListFilesResponse.
type ListFilesResponse struct {
	Data   []OpenAIFile `json:"data"`
	Object string       `json:"object"`
}

// ListFineTuneEventsResponse defines model for ListFineTuneEventsResponse.
type ListFineTuneEventsResponse struct {
	Data   []FineTuneEvent `json:"data"`
	Object string          `json:"object"`
}

// ListFineTunesResponse defines model for ListFineTunesResponse.
type ListFineTunesResponse struct {
	Data   []FineTune `json:"data"`
	Object string     `json:"object"`
}

// ListFineTuningJobEventsResponse defines model for ListFineTuningJobEventsResponse.
type ListFineTuningJobEventsResponse struct {
	Data   []FineTuningJobEvent `json:"data"`
	Object string               `json:"object"`
}

// ListModelsResponse defines model for ListModelsResponse.
type ListModelsResponse struct {
	Data   []Model `json:"data"`
	Object string  `json:"object"`
}

// ListPaginatedFineTuningJobsResponse defines model for ListPaginatedFineTuningJobsResponse.
type ListPaginatedFineTuningJobsResponse struct {
	Data    []FineTuningJob `json:"data"`
	HasMore bool            `json:"has_more"`
	Object  string          `json:"object"`
}

// Model Describes an OpenAI model offering that can be used with the API.
type Model struct {
	// Created The Unix timestamp (in seconds) when the model was created.
	Created int `json:"created"`

	// Id The model identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always "model".
	Object string `json:"object"`

	// OwnedBy The organization that owns the model.
	OwnedBy string `json:"owned_by"`
}

// OpenAIFile The `File` object represents a document that has been uploaded to OpenAI.
type OpenAIFile struct {
	// Bytes The size of the file in bytes.
	Bytes int `json:"bytes"`

	// CreatedAt The Unix timestamp (in seconds) for when the file was created.
	CreatedAt int `json:"created_at"`

	// Filename The name of the file.
	Filename string `json:"filename"`

	// Id The file identifier, which can be referenced in the API endpoints.
	Id string `json:"id"`

	// Object The object type, which is always "file".
	Object string `json:"object"`

	// Purpose The intended purpose of the file. Currently, only "fine-tune" is supported.
	Purpose string `json:"purpose"`

	// Status The current status of the file, which can be either `uploaded`, `processed`, `pending`, `error`, `deleting` or `deleted`.
	Status *string `json:"status,omitempty"`

	// StatusDetails Additional details about the status of the file. If the file is in the `error` state, this will include a message describing the error.
	StatusDetails *string `json:"status_details"`
}

// ListFineTuneEventsParams defines parameters for ListFineTuneEvents.
type ListFineTuneEventsParams struct {
	// Stream Whether to stream events for the fine-tune job. If set to true,
	// events will be sent as data-only
	// [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
	// as they become available. The stream will terminate with a
	// `data: [DONE]` message when the job is finished (succeeded, cancelled,
	// or failed).
	//
	// If set to false, only events generated so far will be returned.
	Stream *bool `form:"stream,omitempty" json:"stream,omitempty"`
}

// ListPaginatedFineTuningJobsParams defines parameters for ListPaginatedFineTuningJobs.
type ListPaginatedFineTuningJobsParams struct {
	// After Identifier for the last job from the previous pagination request.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Number of fine-tuning jobs to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListFineTuningEventsParams defines parameters for ListFineTuningEvents.
type ListFineTuningEventsParams struct {
	// After Identifier for the last event from the previous pagination request.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Number of events to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateTranscriptionMultipartRequestBody defines body for CreateTranscription for multipart/form-data ContentType.
type CreateTranscriptionMultipartRequestBody = CreateTranscriptionRequest

// CreateTranslationMultipartRequestBody defines body for CreateTranslation for multipart/form-data ContentType.
type CreateTranslationMultipartRequestBody = CreateTranslationRequest

// CreateChatCompletionJSONRequestBody defines body for CreateChatCompletion for application/json ContentType.
type CreateChatCompletionJSONRequestBody = CreateChatCompletionRequest

// CreateCompletionJSONRequestBody defines body for CreateCompletion for application/json ContentType.
type CreateCompletionJSONRequestBody = CreateCompletionRequest

// CreateEditJSONRequestBody defines body for CreateEdit for application/json ContentType.
type CreateEditJSONRequestBody = CreateEditRequest

// CreateEmbeddingJSONRequestBody defines body for CreateEmbedding for application/json ContentType.
type CreateEmbeddingJSONRequestBody = CreateEmbeddingRequest

// CreateFileMultipartRequestBody defines body for CreateFile for multipart/form-data ContentType.
type CreateFileMultipartRequestBody = CreateFileRequest

// CreateFineTuneJSONRequestBody defines body for CreateFineTune for application/json ContentType.
type CreateFineTuneJSONRequestBody = CreateFineTuneRequest

// CreateFineTuningJobJSONRequestBody defines body for CreateFineTuningJob for application/json ContentType.
type CreateFineTuningJobJSONRequestBody = CreateFineTuningJobRequest

// CreateImageEditMultipartRequestBody defines body for CreateImageEdit for multipart/form-data ContentType.
type CreateImageEditMultipartRequestBody = CreateImageEditRequest

// CreateImageJSONRequestBody defines body for CreateImage for application/json ContentType.
type CreateImageJSONRequestBody = CreateImageRequest

// CreateImageVariationMultipartRequestBody defines body for CreateImageVariation for multipart/form-data ContentType.
type CreateImageVariationMultipartRequestBody = CreateImageVariationRequest

// CreateModerationJSONRequestBody defines body for CreateModeration for application/json ContentType.
type CreateModerationJSONRequestBody = CreateModerationRequest

// AsCreateChatCompletionRequestFunctionCall0 returns the union data inside the CreateChatCompletionRequest_FunctionCall as a CreateChatCompletionRequestFunctionCall0
func (t CreateChatCompletionRequest_FunctionCall) AsCreateChatCompletionRequestFunctionCall0() (CreateChatCompletionRequestFunctionCall0, error) {
	var body CreateChatCompletionRequestFunctionCall0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestFunctionCall0 overwrites any union data inside the CreateChatCompletionRequest_FunctionCall as the provided CreateChatCompletionRequestFunctionCall0
func (t *CreateChatCompletionRequest_FunctionCall) FromCreateChatCompletionRequestFunctionCall0(v CreateChatCompletionRequestFunctionCall0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestFunctionCall0 performs a merge with any union data inside the CreateChatCompletionRequest_FunctionCall, using the provided CreateChatCompletionRequestFunctionCall0
func (t *CreateChatCompletionRequest_FunctionCall) MergeCreateChatCompletionRequestFunctionCall0(v CreateChatCompletionRequestFunctionCall0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionFunctionCallOption returns the union data inside the CreateChatCompletionRequest_FunctionCall as a ChatCompletionFunctionCallOption
func (t CreateChatCompletionRequest_FunctionCall) AsChatCompletionFunctionCallOption() (ChatCompletionFunctionCallOption, error) {
	var body ChatCompletionFunctionCallOption
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionFunctionCallOption overwrites any union data inside the CreateChatCompletionRequest_FunctionCall as the provided ChatCompletionFunctionCallOption
func (t *CreateChatCompletionRequest_FunctionCall) FromChatCompletionFunctionCallOption(v ChatCompletionFunctionCallOption) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionFunctionCallOption performs a merge with any union data inside the CreateChatCompletionRequest_FunctionCall, using the provided ChatCompletionFunctionCallOption
func (t *CreateChatCompletionRequest_FunctionCall) MergeChatCompletionFunctionCallOption(v ChatCompletionFunctionCallOption) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateChatCompletionRequest_FunctionCall) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateChatCompletionRequest_FunctionCall) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateChatCompletionRequestModel0 returns the union data inside the CreateChatCompletionRequest_Model as a CreateChatCompletionRequestModel0
func (t CreateChatCompletionRequest_Model) AsCreateChatCompletionRequestModel0() (CreateChatCompletionRequestModel0, error) {
	var body CreateChatCompletionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestModel0 overwrites any union data inside the CreateChatCompletionRequest_Model as the provided CreateChatCompletionRequestModel0
func (t *CreateChatCompletionRequest_Model) FromCreateChatCompletionRequestModel0(v CreateChatCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestModel0 performs a merge with any union data inside the CreateChatCompletionRequest_Model, using the provided CreateChatCompletionRequestModel0
func (t *CreateChatCompletionRequest_Model) MergeCreateChatCompletionRequestModel0(v CreateChatCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateChatCompletionRequestModel1 returns the union data inside the CreateChatCompletionRequest_Model as a CreateChatCompletionRequestModel1
func (t CreateChatCompletionRequest_Model) AsCreateChatCompletionRequestModel1() (CreateChatCompletionRequestModel1, error) {
	var body CreateChatCompletionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestModel1 overwrites any union data inside the CreateChatCompletionRequest_Model as the provided CreateChatCompletionRequestModel1
func (t *CreateChatCompletionRequest_Model) FromCreateChatCompletionRequestModel1(v CreateChatCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestModel1 performs a merge with any union data inside the CreateChatCompletionRequest_Model, using the provided CreateChatCompletionRequestModel1
func (t *CreateChatCompletionRequest_Model) MergeCreateChatCompletionRequestModel1(v CreateChatCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateChatCompletionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateChatCompletionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateChatCompletionRequestStop0 returns the union data inside the CreateChatCompletionRequest_Stop as a CreateChatCompletionRequestStop0
func (t CreateChatCompletionRequest_Stop) AsCreateChatCompletionRequestStop0() (CreateChatCompletionRequestStop0, error) {
	var body CreateChatCompletionRequestStop0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestStop0 overwrites any union data inside the CreateChatCompletionRequest_Stop as the provided CreateChatCompletionRequestStop0
func (t *CreateChatCompletionRequest_Stop) FromCreateChatCompletionRequestStop0(v CreateChatCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestStop0 performs a merge with any union data inside the CreateChatCompletionRequest_Stop, using the provided CreateChatCompletionRequestStop0
func (t *CreateChatCompletionRequest_Stop) MergeCreateChatCompletionRequestStop0(v CreateChatCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateChatCompletionRequestStop1 returns the union data inside the CreateChatCompletionRequest_Stop as a CreateChatCompletionRequestStop1
func (t CreateChatCompletionRequest_Stop) AsCreateChatCompletionRequestStop1() (CreateChatCompletionRequestStop1, error) {
	var body CreateChatCompletionRequestStop1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateChatCompletionRequestStop1 overwrites any union data inside the CreateChatCompletionRequest_Stop as the provided CreateChatCompletionRequestStop1
func (t *CreateChatCompletionRequest_Stop) FromCreateChatCompletionRequestStop1(v CreateChatCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateChatCompletionRequestStop1 performs a merge with any union data inside the CreateChatCompletionRequest_Stop, using the provided CreateChatCompletionRequestStop1
func (t *CreateChatCompletionRequest_Stop) MergeCreateChatCompletionRequestStop1(v CreateChatCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateChatCompletionRequest_Stop) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateChatCompletionRequest_Stop) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateCompletionRequestModel0 returns the union data inside the CreateCompletionRequest_Model as a CreateCompletionRequestModel0
func (t CreateCompletionRequest_Model) AsCreateCompletionRequestModel0() (CreateCompletionRequestModel0, error) {
	var body CreateCompletionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestModel0 overwrites any union data inside the CreateCompletionRequest_Model as the provided CreateCompletionRequestModel0
func (t *CreateCompletionRequest_Model) FromCreateCompletionRequestModel0(v CreateCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestModel0 performs a merge with any union data inside the CreateCompletionRequest_Model, using the provided CreateCompletionRequestModel0
func (t *CreateCompletionRequest_Model) MergeCreateCompletionRequestModel0(v CreateCompletionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestModel1 returns the union data inside the CreateCompletionRequest_Model as a CreateCompletionRequestModel1
func (t CreateCompletionRequest_Model) AsCreateCompletionRequestModel1() (CreateCompletionRequestModel1, error) {
	var body CreateCompletionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestModel1 overwrites any union data inside the CreateCompletionRequest_Model as the provided CreateCompletionRequestModel1
func (t *CreateCompletionRequest_Model) FromCreateCompletionRequestModel1(v CreateCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestModel1 performs a merge with any union data inside the CreateCompletionRequest_Model, using the provided CreateCompletionRequestModel1
func (t *CreateCompletionRequest_Model) MergeCreateCompletionRequestModel1(v CreateCompletionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCompletionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateCompletionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateCompletionRequestPrompt0 returns the union data inside the CreateCompletionRequest_Prompt as a CreateCompletionRequestPrompt0
func (t CreateCompletionRequest_Prompt) AsCreateCompletionRequestPrompt0() (CreateCompletionRequestPrompt0, error) {
	var body CreateCompletionRequestPrompt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestPrompt0 overwrites any union data inside the CreateCompletionRequest_Prompt as the provided CreateCompletionRequestPrompt0
func (t *CreateCompletionRequest_Prompt) FromCreateCompletionRequestPrompt0(v CreateCompletionRequestPrompt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestPrompt0 performs a merge with any union data inside the CreateCompletionRequest_Prompt, using the provided CreateCompletionRequestPrompt0
func (t *CreateCompletionRequest_Prompt) MergeCreateCompletionRequestPrompt0(v CreateCompletionRequestPrompt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestPrompt1 returns the union data inside the CreateCompletionRequest_Prompt as a CreateCompletionRequestPrompt1
func (t CreateCompletionRequest_Prompt) AsCreateCompletionRequestPrompt1() (CreateCompletionRequestPrompt1, error) {
	var body CreateCompletionRequestPrompt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestPrompt1 overwrites any union data inside the CreateCompletionRequest_Prompt as the provided CreateCompletionRequestPrompt1
func (t *CreateCompletionRequest_Prompt) FromCreateCompletionRequestPrompt1(v CreateCompletionRequestPrompt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestPrompt1 performs a merge with any union data inside the CreateCompletionRequest_Prompt, using the provided CreateCompletionRequestPrompt1
func (t *CreateCompletionRequest_Prompt) MergeCreateCompletionRequestPrompt1(v CreateCompletionRequestPrompt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestPrompt2 returns the union data inside the CreateCompletionRequest_Prompt as a CreateCompletionRequestPrompt2
func (t CreateCompletionRequest_Prompt) AsCreateCompletionRequestPrompt2() (CreateCompletionRequestPrompt2, error) {
	var body CreateCompletionRequestPrompt2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestPrompt2 overwrites any union data inside the CreateCompletionRequest_Prompt as the provided CreateCompletionRequestPrompt2
func (t *CreateCompletionRequest_Prompt) FromCreateCompletionRequestPrompt2(v CreateCompletionRequestPrompt2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestPrompt2 performs a merge with any union data inside the CreateCompletionRequest_Prompt, using the provided CreateCompletionRequestPrompt2
func (t *CreateCompletionRequest_Prompt) MergeCreateCompletionRequestPrompt2(v CreateCompletionRequestPrompt2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestPrompt3 returns the union data inside the CreateCompletionRequest_Prompt as a CreateCompletionRequestPrompt3
func (t CreateCompletionRequest_Prompt) AsCreateCompletionRequestPrompt3() (CreateCompletionRequestPrompt3, error) {
	var body CreateCompletionRequestPrompt3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestPrompt3 overwrites any union data inside the CreateCompletionRequest_Prompt as the provided CreateCompletionRequestPrompt3
func (t *CreateCompletionRequest_Prompt) FromCreateCompletionRequestPrompt3(v CreateCompletionRequestPrompt3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestPrompt3 performs a merge with any union data inside the CreateCompletionRequest_Prompt, using the provided CreateCompletionRequestPrompt3
func (t *CreateCompletionRequest_Prompt) MergeCreateCompletionRequestPrompt3(v CreateCompletionRequestPrompt3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCompletionRequest_Prompt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateCompletionRequest_Prompt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateCompletionRequestStop0 returns the union data inside the CreateCompletionRequest_Stop as a CreateCompletionRequestStop0
func (t CreateCompletionRequest_Stop) AsCreateCompletionRequestStop0() (CreateCompletionRequestStop0, error) {
	var body CreateCompletionRequestStop0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestStop0 overwrites any union data inside the CreateCompletionRequest_Stop as the provided CreateCompletionRequestStop0
func (t *CreateCompletionRequest_Stop) FromCreateCompletionRequestStop0(v CreateCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestStop0 performs a merge with any union data inside the CreateCompletionRequest_Stop, using the provided CreateCompletionRequestStop0
func (t *CreateCompletionRequest_Stop) MergeCreateCompletionRequestStop0(v CreateCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateCompletionRequestStop1 returns the union data inside the CreateCompletionRequest_Stop as a CreateCompletionRequestStop1
func (t CreateCompletionRequest_Stop) AsCreateCompletionRequestStop1() (CreateCompletionRequestStop1, error) {
	var body CreateCompletionRequestStop1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateCompletionRequestStop1 overwrites any union data inside the CreateCompletionRequest_Stop as the provided CreateCompletionRequestStop1
func (t *CreateCompletionRequest_Stop) FromCreateCompletionRequestStop1(v CreateCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateCompletionRequestStop1 performs a merge with any union data inside the CreateCompletionRequest_Stop, using the provided CreateCompletionRequestStop1
func (t *CreateCompletionRequest_Stop) MergeCreateCompletionRequestStop1(v CreateCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCompletionRequest_Stop) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateCompletionRequest_Stop) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateEditRequestModel0 returns the union data inside the CreateEditRequest_Model as a CreateEditRequestModel0
func (t CreateEditRequest_Model) AsCreateEditRequestModel0() (CreateEditRequestModel0, error) {
	var body CreateEditRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEditRequestModel0 overwrites any union data inside the CreateEditRequest_Model as the provided CreateEditRequestModel0
func (t *CreateEditRequest_Model) FromCreateEditRequestModel0(v CreateEditRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEditRequestModel0 performs a merge with any union data inside the CreateEditRequest_Model, using the provided CreateEditRequestModel0
func (t *CreateEditRequest_Model) MergeCreateEditRequestModel0(v CreateEditRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEditRequestModel1 returns the union data inside the CreateEditRequest_Model as a CreateEditRequestModel1
func (t CreateEditRequest_Model) AsCreateEditRequestModel1() (CreateEditRequestModel1, error) {
	var body CreateEditRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEditRequestModel1 overwrites any union data inside the CreateEditRequest_Model as the provided CreateEditRequestModel1
func (t *CreateEditRequest_Model) FromCreateEditRequestModel1(v CreateEditRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEditRequestModel1 performs a merge with any union data inside the CreateEditRequest_Model, using the provided CreateEditRequestModel1
func (t *CreateEditRequest_Model) MergeCreateEditRequestModel1(v CreateEditRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateEditRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateEditRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateEmbeddingRequestInput0 returns the union data inside the CreateEmbeddingRequest_Input as a CreateEmbeddingRequestInput0
func (t CreateEmbeddingRequest_Input) AsCreateEmbeddingRequestInput0() (CreateEmbeddingRequestInput0, error) {
	var body CreateEmbeddingRequestInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestInput0 overwrites any union data inside the CreateEmbeddingRequest_Input as the provided CreateEmbeddingRequestInput0
func (t *CreateEmbeddingRequest_Input) FromCreateEmbeddingRequestInput0(v CreateEmbeddingRequestInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestInput0 performs a merge with any union data inside the CreateEmbeddingRequest_Input, using the provided CreateEmbeddingRequestInput0
func (t *CreateEmbeddingRequest_Input) MergeCreateEmbeddingRequestInput0(v CreateEmbeddingRequestInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEmbeddingRequestInput1 returns the union data inside the CreateEmbeddingRequest_Input as a CreateEmbeddingRequestInput1
func (t CreateEmbeddingRequest_Input) AsCreateEmbeddingRequestInput1() (CreateEmbeddingRequestInput1, error) {
	var body CreateEmbeddingRequestInput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestInput1 overwrites any union data inside the CreateEmbeddingRequest_Input as the provided CreateEmbeddingRequestInput1
func (t *CreateEmbeddingRequest_Input) FromCreateEmbeddingRequestInput1(v CreateEmbeddingRequestInput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestInput1 performs a merge with any union data inside the CreateEmbeddingRequest_Input, using the provided CreateEmbeddingRequestInput1
func (t *CreateEmbeddingRequest_Input) MergeCreateEmbeddingRequestInput1(v CreateEmbeddingRequestInput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEmbeddingRequestInput2 returns the union data inside the CreateEmbeddingRequest_Input as a CreateEmbeddingRequestInput2
func (t CreateEmbeddingRequest_Input) AsCreateEmbeddingRequestInput2() (CreateEmbeddingRequestInput2, error) {
	var body CreateEmbeddingRequestInput2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestInput2 overwrites any union data inside the CreateEmbeddingRequest_Input as the provided CreateEmbeddingRequestInput2
func (t *CreateEmbeddingRequest_Input) FromCreateEmbeddingRequestInput2(v CreateEmbeddingRequestInput2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestInput2 performs a merge with any union data inside the CreateEmbeddingRequest_Input, using the provided CreateEmbeddingRequestInput2
func (t *CreateEmbeddingRequest_Input) MergeCreateEmbeddingRequestInput2(v CreateEmbeddingRequestInput2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEmbeddingRequestInput3 returns the union data inside the CreateEmbeddingRequest_Input as a CreateEmbeddingRequestInput3
func (t CreateEmbeddingRequest_Input) AsCreateEmbeddingRequestInput3() (CreateEmbeddingRequestInput3, error) {
	var body CreateEmbeddingRequestInput3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestInput3 overwrites any union data inside the CreateEmbeddingRequest_Input as the provided CreateEmbeddingRequestInput3
func (t *CreateEmbeddingRequest_Input) FromCreateEmbeddingRequestInput3(v CreateEmbeddingRequestInput3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestInput3 performs a merge with any union data inside the CreateEmbeddingRequest_Input, using the provided CreateEmbeddingRequestInput3
func (t *CreateEmbeddingRequest_Input) MergeCreateEmbeddingRequestInput3(v CreateEmbeddingRequestInput3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateEmbeddingRequest_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateEmbeddingRequest_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateEmbeddingRequestModel0 returns the union data inside the CreateEmbeddingRequest_Model as a CreateEmbeddingRequestModel0
func (t CreateEmbeddingRequest_Model) AsCreateEmbeddingRequestModel0() (CreateEmbeddingRequestModel0, error) {
	var body CreateEmbeddingRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestModel0 overwrites any union data inside the CreateEmbeddingRequest_Model as the provided CreateEmbeddingRequestModel0
func (t *CreateEmbeddingRequest_Model) FromCreateEmbeddingRequestModel0(v CreateEmbeddingRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestModel0 performs a merge with any union data inside the CreateEmbeddingRequest_Model, using the provided CreateEmbeddingRequestModel0
func (t *CreateEmbeddingRequest_Model) MergeCreateEmbeddingRequestModel0(v CreateEmbeddingRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateEmbeddingRequestModel1 returns the union data inside the CreateEmbeddingRequest_Model as a CreateEmbeddingRequestModel1
func (t CreateEmbeddingRequest_Model) AsCreateEmbeddingRequestModel1() (CreateEmbeddingRequestModel1, error) {
	var body CreateEmbeddingRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateEmbeddingRequestModel1 overwrites any union data inside the CreateEmbeddingRequest_Model as the provided CreateEmbeddingRequestModel1
func (t *CreateEmbeddingRequest_Model) FromCreateEmbeddingRequestModel1(v CreateEmbeddingRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateEmbeddingRequestModel1 performs a merge with any union data inside the CreateEmbeddingRequest_Model, using the provided CreateEmbeddingRequestModel1
func (t *CreateEmbeddingRequest_Model) MergeCreateEmbeddingRequestModel1(v CreateEmbeddingRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateEmbeddingRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateEmbeddingRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateFineTuneRequestModel0 returns the union data inside the CreateFineTuneRequest_Model as a CreateFineTuneRequestModel0
func (t CreateFineTuneRequest_Model) AsCreateFineTuneRequestModel0() (CreateFineTuneRequestModel0, error) {
	var body CreateFineTuneRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuneRequestModel0 overwrites any union data inside the CreateFineTuneRequest_Model as the provided CreateFineTuneRequestModel0
func (t *CreateFineTuneRequest_Model) FromCreateFineTuneRequestModel0(v CreateFineTuneRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuneRequestModel0 performs a merge with any union data inside the CreateFineTuneRequest_Model, using the provided CreateFineTuneRequestModel0
func (t *CreateFineTuneRequest_Model) MergeCreateFineTuneRequestModel0(v CreateFineTuneRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateFineTuneRequestModel1 returns the union data inside the CreateFineTuneRequest_Model as a CreateFineTuneRequestModel1
func (t CreateFineTuneRequest_Model) AsCreateFineTuneRequestModel1() (CreateFineTuneRequestModel1, error) {
	var body CreateFineTuneRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuneRequestModel1 overwrites any union data inside the CreateFineTuneRequest_Model as the provided CreateFineTuneRequestModel1
func (t *CreateFineTuneRequest_Model) FromCreateFineTuneRequestModel1(v CreateFineTuneRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuneRequestModel1 performs a merge with any union data inside the CreateFineTuneRequest_Model, using the provided CreateFineTuneRequestModel1
func (t *CreateFineTuneRequest_Model) MergeCreateFineTuneRequestModel1(v CreateFineTuneRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateFineTuneRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateFineTuneRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateFineTuningJobRequestHyperparametersNEpochs0 returns the union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs as a CreateFineTuningJobRequestHyperparametersNEpochs0
func (t CreateFineTuningJobRequest_Hyperparameters_NEpochs) AsCreateFineTuningJobRequestHyperparametersNEpochs0() (CreateFineTuningJobRequestHyperparametersNEpochs0, error) {
	var body CreateFineTuningJobRequestHyperparametersNEpochs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestHyperparametersNEpochs0 overwrites any union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs as the provided CreateFineTuningJobRequestHyperparametersNEpochs0
func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) FromCreateFineTuningJobRequestHyperparametersNEpochs0(v CreateFineTuningJobRequestHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestHyperparametersNEpochs0 performs a merge with any union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs, using the provided CreateFineTuningJobRequestHyperparametersNEpochs0
func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) MergeCreateFineTuningJobRequestHyperparametersNEpochs0(v CreateFineTuningJobRequestHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateFineTuningJobRequestHyperparametersNEpochs1 returns the union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs as a CreateFineTuningJobRequestHyperparametersNEpochs1
func (t CreateFineTuningJobRequest_Hyperparameters_NEpochs) AsCreateFineTuningJobRequestHyperparametersNEpochs1() (CreateFineTuningJobRequestHyperparametersNEpochs1, error) {
	var body CreateFineTuningJobRequestHyperparametersNEpochs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestHyperparametersNEpochs1 overwrites any union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs as the provided CreateFineTuningJobRequestHyperparametersNEpochs1
func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) FromCreateFineTuningJobRequestHyperparametersNEpochs1(v CreateFineTuningJobRequestHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestHyperparametersNEpochs1 performs a merge with any union data inside the CreateFineTuningJobRequest_Hyperparameters_NEpochs, using the provided CreateFineTuningJobRequestHyperparametersNEpochs1
func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) MergeCreateFineTuningJobRequestHyperparametersNEpochs1(v CreateFineTuningJobRequestHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateFineTuningJobRequest_Hyperparameters_NEpochs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateFineTuningJobRequest_Hyperparameters_NEpochs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateFineTuningJobRequestModel0 returns the union data inside the CreateFineTuningJobRequest_Model as a CreateFineTuningJobRequestModel0
func (t CreateFineTuningJobRequest_Model) AsCreateFineTuningJobRequestModel0() (CreateFineTuningJobRequestModel0, error) {
	var body CreateFineTuningJobRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestModel0 overwrites any union data inside the CreateFineTuningJobRequest_Model as the provided CreateFineTuningJobRequestModel0
func (t *CreateFineTuningJobRequest_Model) FromCreateFineTuningJobRequestModel0(v CreateFineTuningJobRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestModel0 performs a merge with any union data inside the CreateFineTuningJobRequest_Model, using the provided CreateFineTuningJobRequestModel0
func (t *CreateFineTuningJobRequest_Model) MergeCreateFineTuningJobRequestModel0(v CreateFineTuningJobRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateFineTuningJobRequestModel1 returns the union data inside the CreateFineTuningJobRequest_Model as a CreateFineTuningJobRequestModel1
func (t CreateFineTuningJobRequest_Model) AsCreateFineTuningJobRequestModel1() (CreateFineTuningJobRequestModel1, error) {
	var body CreateFineTuningJobRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFineTuningJobRequestModel1 overwrites any union data inside the CreateFineTuningJobRequest_Model as the provided CreateFineTuningJobRequestModel1
func (t *CreateFineTuningJobRequest_Model) FromCreateFineTuningJobRequestModel1(v CreateFineTuningJobRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFineTuningJobRequestModel1 performs a merge with any union data inside the CreateFineTuningJobRequest_Model, using the provided CreateFineTuningJobRequestModel1
func (t *CreateFineTuningJobRequest_Model) MergeCreateFineTuningJobRequestModel1(v CreateFineTuningJobRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateFineTuningJobRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateFineTuningJobRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateModerationRequestInput0 returns the union data inside the CreateModerationRequest_Input as a CreateModerationRequestInput0
func (t CreateModerationRequest_Input) AsCreateModerationRequestInput0() (CreateModerationRequestInput0, error) {
	var body CreateModerationRequestInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateModerationRequestInput0 overwrites any union data inside the CreateModerationRequest_Input as the provided CreateModerationRequestInput0
func (t *CreateModerationRequest_Input) FromCreateModerationRequestInput0(v CreateModerationRequestInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateModerationRequestInput0 performs a merge with any union data inside the CreateModerationRequest_Input, using the provided CreateModerationRequestInput0
func (t *CreateModerationRequest_Input) MergeCreateModerationRequestInput0(v CreateModerationRequestInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateModerationRequestInput1 returns the union data inside the CreateModerationRequest_Input as a CreateModerationRequestInput1
func (t CreateModerationRequest_Input) AsCreateModerationRequestInput1() (CreateModerationRequestInput1, error) {
	var body CreateModerationRequestInput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateModerationRequestInput1 overwrites any union data inside the CreateModerationRequest_Input as the provided CreateModerationRequestInput1
func (t *CreateModerationRequest_Input) FromCreateModerationRequestInput1(v CreateModerationRequestInput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateModerationRequestInput1 performs a merge with any union data inside the CreateModerationRequest_Input, using the provided CreateModerationRequestInput1
func (t *CreateModerationRequest_Input) MergeCreateModerationRequestInput1(v CreateModerationRequestInput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateModerationRequest_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateModerationRequest_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateModerationRequestModel0 returns the union data inside the CreateModerationRequest_Model as a CreateModerationRequestModel0
func (t CreateModerationRequest_Model) AsCreateModerationRequestModel0() (CreateModerationRequestModel0, error) {
	var body CreateModerationRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateModerationRequestModel0 overwrites any union data inside the CreateModerationRequest_Model as the provided CreateModerationRequestModel0
func (t *CreateModerationRequest_Model) FromCreateModerationRequestModel0(v CreateModerationRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateModerationRequestModel0 performs a merge with any union data inside the CreateModerationRequest_Model, using the provided CreateModerationRequestModel0
func (t *CreateModerationRequest_Model) MergeCreateModerationRequestModel0(v CreateModerationRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateModerationRequestModel1 returns the union data inside the CreateModerationRequest_Model as a CreateModerationRequestModel1
func (t CreateModerationRequest_Model) AsCreateModerationRequestModel1() (CreateModerationRequestModel1, error) {
	var body CreateModerationRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateModerationRequestModel1 overwrites any union data inside the CreateModerationRequest_Model as the provided CreateModerationRequestModel1
func (t *CreateModerationRequest_Model) FromCreateModerationRequestModel1(v CreateModerationRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateModerationRequestModel1 performs a merge with any union data inside the CreateModerationRequest_Model, using the provided CreateModerationRequestModel1
func (t *CreateModerationRequest_Model) MergeCreateModerationRequestModel1(v CreateModerationRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateModerationRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateModerationRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateTranscriptionRequestModel0 returns the union data inside the CreateTranscriptionRequest_Model as a CreateTranscriptionRequestModel0
func (t CreateTranscriptionRequest_Model) AsCreateTranscriptionRequestModel0() (CreateTranscriptionRequestModel0, error) {
	var body CreateTranscriptionRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTranscriptionRequestModel0 overwrites any union data inside the CreateTranscriptionRequest_Model as the provided CreateTranscriptionRequestModel0
func (t *CreateTranscriptionRequest_Model) FromCreateTranscriptionRequestModel0(v CreateTranscriptionRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTranscriptionRequestModel0 performs a merge with any union data inside the CreateTranscriptionRequest_Model, using the provided CreateTranscriptionRequestModel0
func (t *CreateTranscriptionRequest_Model) MergeCreateTranscriptionRequestModel0(v CreateTranscriptionRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateTranscriptionRequestModel1 returns the union data inside the CreateTranscriptionRequest_Model as a CreateTranscriptionRequestModel1
func (t CreateTranscriptionRequest_Model) AsCreateTranscriptionRequestModel1() (CreateTranscriptionRequestModel1, error) {
	var body CreateTranscriptionRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTranscriptionRequestModel1 overwrites any union data inside the CreateTranscriptionRequest_Model as the provided CreateTranscriptionRequestModel1
func (t *CreateTranscriptionRequest_Model) FromCreateTranscriptionRequestModel1(v CreateTranscriptionRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTranscriptionRequestModel1 performs a merge with any union data inside the CreateTranscriptionRequest_Model, using the provided CreateTranscriptionRequestModel1
func (t *CreateTranscriptionRequest_Model) MergeCreateTranscriptionRequestModel1(v CreateTranscriptionRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateTranscriptionRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateTranscriptionRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateTranslationRequestModel0 returns the union data inside the CreateTranslationRequest_Model as a CreateTranslationRequestModel0
func (t CreateTranslationRequest_Model) AsCreateTranslationRequestModel0() (CreateTranslationRequestModel0, error) {
	var body CreateTranslationRequestModel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTranslationRequestModel0 overwrites any union data inside the CreateTranslationRequest_Model as the provided CreateTranslationRequestModel0
func (t *CreateTranslationRequest_Model) FromCreateTranslationRequestModel0(v CreateTranslationRequestModel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTranslationRequestModel0 performs a merge with any union data inside the CreateTranslationRequest_Model, using the provided CreateTranslationRequestModel0
func (t *CreateTranslationRequest_Model) MergeCreateTranslationRequestModel0(v CreateTranslationRequestModel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateTranslationRequestModel1 returns the union data inside the CreateTranslationRequest_Model as a CreateTranslationRequestModel1
func (t CreateTranslationRequest_Model) AsCreateTranslationRequestModel1() (CreateTranslationRequestModel1, error) {
	var body CreateTranslationRequestModel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateTranslationRequestModel1 overwrites any union data inside the CreateTranslationRequest_Model as the provided CreateTranslationRequestModel1
func (t *CreateTranslationRequest_Model) FromCreateTranslationRequestModel1(v CreateTranslationRequestModel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateTranslationRequestModel1 performs a merge with any union data inside the CreateTranslationRequest_Model, using the provided CreateTranslationRequestModel1
func (t *CreateTranslationRequest_Model) MergeCreateTranslationRequestModel1(v CreateTranslationRequestModel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateTranslationRequest_Model) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateTranslationRequest_Model) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFineTuningJobHyperparametersNEpochs0 returns the union data inside the FineTuningJob_Hyperparameters_NEpochs as a FineTuningJobHyperparametersNEpochs0
func (t FineTuningJob_Hyperparameters_NEpochs) AsFineTuningJobHyperparametersNEpochs0() (FineTuningJobHyperparametersNEpochs0, error) {
	var body FineTuningJobHyperparametersNEpochs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFineTuningJobHyperparametersNEpochs0 overwrites any union data inside the FineTuningJob_Hyperparameters_NEpochs as the provided FineTuningJobHyperparametersNEpochs0
func (t *FineTuningJob_Hyperparameters_NEpochs) FromFineTuningJobHyperparametersNEpochs0(v FineTuningJobHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFineTuningJobHyperparametersNEpochs0 performs a merge with any union data inside the FineTuningJob_Hyperparameters_NEpochs, using the provided FineTuningJobHyperparametersNEpochs0
func (t *FineTuningJob_Hyperparameters_NEpochs) MergeFineTuningJobHyperparametersNEpochs0(v FineTuningJobHyperparametersNEpochs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsFineTuningJobHyperparametersNEpochs1 returns the union data inside the FineTuningJob_Hyperparameters_NEpochs as a FineTuningJobHyperparametersNEpochs1
func (t FineTuningJob_Hyperparameters_NEpochs) AsFineTuningJobHyperparametersNEpochs1() (FineTuningJobHyperparametersNEpochs1, error) {
	var body FineTuningJobHyperparametersNEpochs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFineTuningJobHyperparametersNEpochs1 overwrites any union data inside the FineTuningJob_Hyperparameters_NEpochs as the provided FineTuningJobHyperparametersNEpochs1
func (t *FineTuningJob_Hyperparameters_NEpochs) FromFineTuningJobHyperparametersNEpochs1(v FineTuningJobHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFineTuningJobHyperparametersNEpochs1 performs a merge with any union data inside the FineTuningJob_Hyperparameters_NEpochs, using the provided FineTuningJobHyperparametersNEpochs1
func (t *FineTuningJob_Hyperparameters_NEpochs) MergeFineTuningJobHyperparametersNEpochs1(v FineTuningJobHyperparametersNEpochs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t FineTuningJob_Hyperparameters_NEpochs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FineTuningJob_Hyperparameters_NEpochs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateTranscriptionWithBody request with any body
	CreateTranscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTranslationWithBody request with any body
	CreateTranslationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChatCompletionWithBody request with any body
	CreateChatCompletionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateChatCompletion(ctx context.Context, body CreateChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCompletionWithBody request with any body
	CreateCompletionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCompletion(ctx context.Context, body CreateCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEditWithBody request with any body
	CreateEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEdit(ctx context.Context, body CreateEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEmbeddingWithBody request with any body
	CreateEmbeddingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEmbedding(ctx context.Context, body CreateEmbeddingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFiles request
	ListFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFileWithBody request with any body
	CreateFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFile request
	DeleteFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveFile request
	RetrieveFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadFile request
	DownloadFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFineTunes request
	ListFineTunes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFineTuneWithBody request with any body
	CreateFineTuneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFineTune(ctx context.Context, body CreateFineTuneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveFineTune request
	RetrieveFineTune(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelFineTune request
	CancelFineTune(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFineTuneEvents request
	ListFineTuneEvents(ctx context.Context, fineTuneId string, params *ListFineTuneEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPaginatedFineTuningJobs request
	ListPaginatedFineTuningJobs(ctx context.Context, params *ListPaginatedFineTuningJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFineTuningJobWithBody request with any body
	CreateFineTuningJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFineTuningJob(ctx context.Context, body CreateFineTuningJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveFineTuningJob request
	RetrieveFineTuningJob(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelFineTuningJob request
	CancelFineTuningJob(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFineTuningEvents request
	ListFineTuningEvents(ctx context.Context, fineTuningJobId string, params *ListFineTuningEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateImageEditWithBody request with any body
	CreateImageEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateImageWithBody request with any body
	CreateImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateImage(ctx context.Context, body CreateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateImageVariationWithBody request with any body
	CreateImageVariationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModels request
	ListModels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModel request
	DeleteModel(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveModel request
	RetrieveModel(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateModerationWithBody request with any body
	CreateModerationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateModeration(ctx context.Context, body CreateModerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateTranscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTranscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTranslationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTranslationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChatCompletionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChatCompletionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChatCompletion(ctx context.Context, body CreateChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChatCompletionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCompletionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCompletionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCompletion(ctx context.Context, body CreateCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCompletionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEdit(ctx context.Context, body CreateEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEditRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEmbeddingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEmbeddingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEmbedding(ctx context.Context, body CreateEmbeddingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEmbeddingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveFileRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadFileRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFineTunes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFineTunesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFineTuneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFineTuneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFineTune(ctx context.Context, body CreateFineTuneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFineTuneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveFineTune(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveFineTuneRequest(c.Server, fineTuneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelFineTune(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelFineTuneRequest(c.Server, fineTuneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFineTuneEvents(ctx context.Context, fineTuneId string, params *ListFineTuneEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFineTuneEventsRequest(c.Server, fineTuneId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPaginatedFineTuningJobs(ctx context.Context, params *ListPaginatedFineTuningJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPaginatedFineTuningJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFineTuningJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFineTuningJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFineTuningJob(ctx context.Context, body CreateFineTuningJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFineTuningJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveFineTuningJob(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveFineTuningJobRequest(c.Server, fineTuningJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelFineTuningJob(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelFineTuningJobRequest(c.Server, fineTuningJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFineTuningEvents(ctx context.Context, fineTuningJobId string, params *ListFineTuningEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFineTuningEventsRequest(c.Server, fineTuningJobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImageEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImageEditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImage(ctx context.Context, body CreateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImageVariationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImageVariationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModel(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelRequest(c.Server, model)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveModel(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveModelRequest(c.Server, model)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModerationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModerationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModeration(ctx context.Context, body CreateModerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModerationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateTranscriptionRequestWithBody generates requests for CreateTranscription with any type of body
func NewCreateTranscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/transcriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTranslationRequestWithBody generates requests for CreateTranslation with any type of body
func NewCreateTranslationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/translations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateChatCompletionRequest calls the generic CreateChatCompletion builder with application/json body
func NewCreateChatCompletionRequest(server string, body CreateChatCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateChatCompletionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateChatCompletionRequestWithBody generates requests for CreateChatCompletion with any type of body
func NewCreateChatCompletionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat/completions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCompletionRequest calls the generic CreateCompletion builder with application/json body
func NewCreateCompletionRequest(server string, body CreateCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCompletionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCompletionRequestWithBody generates requests for CreateCompletion with any type of body
func NewCreateCompletionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/completions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateEditRequest calls the generic CreateEdit builder with application/json body
func NewCreateEditRequest(server string, body CreateEditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEditRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEditRequestWithBody generates requests for CreateEdit with any type of body
func NewCreateEditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/edits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateEmbeddingRequest calls the generic CreateEmbedding builder with application/json body
func NewCreateEmbeddingRequest(server string, body CreateEmbeddingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEmbeddingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEmbeddingRequestWithBody generates requests for CreateEmbedding with any type of body
func NewCreateEmbeddingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embeddings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFilesRequest generates requests for ListFiles
func NewListFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFileRequestWithBody generates requests for CreateFile with any type of body
func NewCreateFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFileRequest generates requests for DeleteFile
func NewDeleteFileRequest(server string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveFileRequest generates requests for RetrieveFile
func NewRetrieveFileRequest(server string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadFileRequest generates requests for DownloadFile
func NewDownloadFileRequest(server string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s/content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFineTunesRequest generates requests for ListFineTunes
func NewListFineTunesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFineTuneRequest calls the generic CreateFineTune builder with application/json body
func NewCreateFineTuneRequest(server string, body CreateFineTuneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFineTuneRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFineTuneRequestWithBody generates requests for CreateFineTune with any type of body
func NewCreateFineTuneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveFineTuneRequest generates requests for RetrieveFineTune
func NewRetrieveFineTuneRequest(server string, fineTuneId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, fineTuneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelFineTuneRequest generates requests for CancelFineTune
func NewCancelFineTuneRequest(server string, fineTuneId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, fineTuneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFineTuneEventsRequest generates requests for ListFineTuneEvents
func NewListFineTuneEventsRequest(server string, fineTuneId string, params *ListFineTuneEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, fineTuneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPaginatedFineTuningJobsRequest generates requests for ListPaginatedFineTuningJobs
func NewListPaginatedFineTuningJobsRequest(server string, params *ListPaginatedFineTuningJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFineTuningJobRequest calls the generic CreateFineTuningJob builder with application/json body
func NewCreateFineTuningJobRequest(server string, body CreateFineTuningJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFineTuningJobRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFineTuningJobRequestWithBody generates requests for CreateFineTuningJob with any type of body
func NewCreateFineTuningJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveFineTuningJobRequest generates requests for RetrieveFineTuningJob
func NewRetrieveFineTuningJobRequest(server string, fineTuningJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, fineTuningJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelFineTuningJobRequest generates requests for CancelFineTuningJob
func NewCancelFineTuningJobRequest(server string, fineTuningJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, fineTuningJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFineTuningEventsRequest generates requests for ListFineTuningEvents
func NewListFineTuningEventsRequest(server string, fineTuningJobId string, params *ListFineTuningEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, fineTuningJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateImageEditRequestWithBody generates requests for CreateImageEdit with any type of body
func NewCreateImageEditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/edits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateImageRequest calls the generic CreateImage builder with application/json body
func NewCreateImageRequest(server string, body CreateImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateImageRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateImageRequestWithBody generates requests for CreateImage with any type of body
func NewCreateImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/generations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateImageVariationRequestWithBody generates requests for CreateImageVariation with any type of body
func NewCreateImageVariationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/variations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListModelsRequest generates requests for ListModels
func NewListModelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteModelRequest generates requests for DeleteModel
func NewDeleteModelRequest(server string, model string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model", runtime.ParamLocationPath, model)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveModelRequest generates requests for RetrieveModel
func NewRetrieveModelRequest(server string, model string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model", runtime.ParamLocationPath, model)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateModerationRequest calls the generic CreateModeration builder with application/json body
func NewCreateModerationRequest(server string, body CreateModerationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateModerationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateModerationRequestWithBody generates requests for CreateModeration with any type of body
func NewCreateModerationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/moderations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateTranscriptionWithBodyWithResponse request with any body
	CreateTranscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTranscriptionResponse, error)

	// CreateTranslationWithBodyWithResponse request with any body
	CreateTranslationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTranslationResponse, error)

	// CreateChatCompletionWithBodyWithResponse request with any body
	CreateChatCompletionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChatCompletionResponse, error)

	CreateChatCompletionWithResponse(ctx context.Context, body CreateChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChatCompletionResponse, error)

	// CreateCompletionWithBodyWithResponse request with any body
	CreateCompletionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCompletionResponse, error)

	CreateCompletionWithResponse(ctx context.Context, body CreateCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCompletionResponse, error)

	// CreateEditWithBodyWithResponse request with any body
	CreateEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEditResponse, error)

	CreateEditWithResponse(ctx context.Context, body CreateEditJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEditResponse, error)

	// CreateEmbeddingWithBodyWithResponse request with any body
	CreateEmbeddingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEmbeddingResponse, error)

	CreateEmbeddingWithResponse(ctx context.Context, body CreateEmbeddingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEmbeddingResponse, error)

	// ListFilesWithResponse request
	ListFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFilesResponse, error)

	// CreateFileWithBodyWithResponse request with any body
	CreateFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFileResponse, error)

	// DeleteFileWithResponse request
	DeleteFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error)

	// RetrieveFileWithResponse request
	RetrieveFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*RetrieveFileResponse, error)

	// DownloadFileWithResponse request
	DownloadFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*DownloadFileResponse, error)

	// ListFineTunesWithResponse request
	ListFineTunesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFineTunesResponse, error)

	// CreateFineTuneWithBodyWithResponse request with any body
	CreateFineTuneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFineTuneResponse, error)

	CreateFineTuneWithResponse(ctx context.Context, body CreateFineTuneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFineTuneResponse, error)

	// RetrieveFineTuneWithResponse request
	RetrieveFineTuneWithResponse(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*RetrieveFineTuneResponse, error)

	// CancelFineTuneWithResponse request
	CancelFineTuneWithResponse(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*CancelFineTuneResponse, error)

	// ListFineTuneEventsWithResponse request
	ListFineTuneEventsWithResponse(ctx context.Context, fineTuneId string, params *ListFineTuneEventsParams, reqEditors ...RequestEditorFn) (*ListFineTuneEventsResponse, error)

	// ListPaginatedFineTuningJobsWithResponse request
	ListPaginatedFineTuningJobsWithResponse(ctx context.Context, params *ListPaginatedFineTuningJobsParams, reqEditors ...RequestEditorFn) (*ListPaginatedFineTuningJobsResponse, error)

	// CreateFineTuningJobWithBodyWithResponse request with any body
	CreateFineTuningJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFineTuningJobResponse, error)

	CreateFineTuningJobWithResponse(ctx context.Context, body CreateFineTuningJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFineTuningJobResponse, error)

	// RetrieveFineTuningJobWithResponse request
	RetrieveFineTuningJobWithResponse(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*RetrieveFineTuningJobResponse, error)

	// CancelFineTuningJobWithResponse request
	CancelFineTuningJobWithResponse(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*CancelFineTuningJobResponse, error)

	// ListFineTuningEventsWithResponse request
	ListFineTuningEventsWithResponse(ctx context.Context, fineTuningJobId string, params *ListFineTuningEventsParams, reqEditors ...RequestEditorFn) (*ListFineTuningEventsResponse, error)

	// CreateImageEditWithBodyWithResponse request with any body
	CreateImageEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageEditResponse, error)

	// CreateImageWithBodyWithResponse request with any body
	CreateImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageResponse, error)

	CreateImageWithResponse(ctx context.Context, body CreateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateImageResponse, error)

	// CreateImageVariationWithBodyWithResponse request with any body
	CreateImageVariationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageVariationResponse, error)

	// ListModelsWithResponse request
	ListModelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelsResponse, error)

	// DeleteModelWithResponse request
	DeleteModelWithResponse(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error)

	// RetrieveModelWithResponse request
	RetrieveModelWithResponse(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*RetrieveModelResponse, error)

	// CreateModerationWithBodyWithResponse request with any body
	CreateModerationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModerationResponse, error)

	CreateModerationWithResponse(ctx context.Context, body CreateModerationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModerationResponse, error)
}

type CreateTranscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTranscriptionResponse
}

// Status returns HTTPResponse.Status
func (r CreateTranscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTranscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTranslationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTranslationResponse
}

// Status returns HTTPResponse.Status
func (r CreateTranslationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTranslationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChatCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateChatCompletionResponse
}

// Status returns HTTPResponse.Status
func (r CreateChatCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChatCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCompletionResponse
}

// Status returns HTTPResponse.Status
func (r CreateCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateEditResponse
}

// Status returns HTTPResponse.Status
func (r CreateEditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEmbeddingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateEmbeddingResponse
}

// Status returns HTTPResponse.Status
func (r CreateEmbeddingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEmbeddingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFilesResponse
}

// Status returns HTTPResponse.Status
func (r ListFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpenAIFile
}

// Status returns HTTPResponse.Status
func (r CreateFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteFileResponse
}

// Status returns HTTPResponse.Status
func (r DeleteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpenAIFile
}

// Status returns HTTPResponse.Status
func (r RetrieveFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r DownloadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFineTunesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFineTunesResponse
}

// Status returns HTTPResponse.Status
func (r ListFineTunesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFineTunesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFineTuneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FineTune
}

// Status returns HTTPResponse.Status
func (r CreateFineTuneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFineTuneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveFineTuneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FineTune
}

// Status returns HTTPResponse.Status
func (r RetrieveFineTuneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveFineTuneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelFineTuneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FineTune
}

// Status returns HTTPResponse.Status
func (r CancelFineTuneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelFineTuneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFineTuneEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFineTuneEventsResponse
}

// Status returns HTTPResponse.Status
func (r ListFineTuneEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFineTuneEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPaginatedFineTuningJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPaginatedFineTuningJobsResponse
}

// Status returns HTTPResponse.Status
func (r ListPaginatedFineTuningJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPaginatedFineTuningJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFineTuningJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FineTuningJob
}

// Status returns HTTPResponse.Status
func (r CreateFineTuningJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFineTuningJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveFineTuningJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FineTuningJob
}

// Status returns HTTPResponse.Status
func (r RetrieveFineTuningJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveFineTuningJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelFineTuningJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FineTuningJob
}

// Status returns HTTPResponse.Status
func (r CancelFineTuningJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelFineTuningJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFineTuningEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFineTuningJobEventsResponse
}

// Status returns HTTPResponse.Status
func (r ListFineTuningEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFineTuningEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImageEditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImagesResponse
}

// Status returns HTTPResponse.Status
func (r CreateImageEditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImageEditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImagesResponse
}

// Status returns HTTPResponse.Status
func (r CreateImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImageVariationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImagesResponse
}

// Status returns HTTPResponse.Status
func (r CreateImageVariationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImageVariationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListModelsResponse
}

// Status returns HTTPResponse.Status
func (r ListModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteModelResponse
}

// Status returns HTTPResponse.Status
func (r DeleteModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r RetrieveModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateModerationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateModerationResponse
}

// Status returns HTTPResponse.Status
func (r CreateModerationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateModerationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateTranscriptionWithBodyWithResponse request with arbitrary body returning *CreateTranscriptionResponse
func (c *ClientWithResponses) CreateTranscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTranscriptionResponse, error) {
	rsp, err := c.CreateTranscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTranscriptionResponse(rsp)
}

// CreateTranslationWithBodyWithResponse request with arbitrary body returning *CreateTranslationResponse
func (c *ClientWithResponses) CreateTranslationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTranslationResponse, error) {
	rsp, err := c.CreateTranslationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTranslationResponse(rsp)
}

// CreateChatCompletionWithBodyWithResponse request with arbitrary body returning *CreateChatCompletionResponse
func (c *ClientWithResponses) CreateChatCompletionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChatCompletionResponse, error) {
	rsp, err := c.CreateChatCompletionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChatCompletionResponse(rsp)
}

func (c *ClientWithResponses) CreateChatCompletionWithResponse(ctx context.Context, body CreateChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChatCompletionResponse, error) {
	rsp, err := c.CreateChatCompletion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChatCompletionResponse(rsp)
}

// CreateCompletionWithBodyWithResponse request with arbitrary body returning *CreateCompletionResponse
func (c *ClientWithResponses) CreateCompletionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCompletionResponse, error) {
	rsp, err := c.CreateCompletionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCompletionResponse(rsp)
}

func (c *ClientWithResponses) CreateCompletionWithResponse(ctx context.Context, body CreateCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCompletionResponse, error) {
	rsp, err := c.CreateCompletion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCompletionResponse(rsp)
}

// CreateEditWithBodyWithResponse request with arbitrary body returning *CreateEditResponse
func (c *ClientWithResponses) CreateEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEditResponse, error) {
	rsp, err := c.CreateEditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEditResponse(rsp)
}

func (c *ClientWithResponses) CreateEditWithResponse(ctx context.Context, body CreateEditJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEditResponse, error) {
	rsp, err := c.CreateEdit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEditResponse(rsp)
}

// CreateEmbeddingWithBodyWithResponse request with arbitrary body returning *CreateEmbeddingResponse
func (c *ClientWithResponses) CreateEmbeddingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEmbeddingResponse, error) {
	rsp, err := c.CreateEmbeddingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEmbeddingResponse(rsp)
}

func (c *ClientWithResponses) CreateEmbeddingWithResponse(ctx context.Context, body CreateEmbeddingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEmbeddingResponse, error) {
	rsp, err := c.CreateEmbedding(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEmbeddingResponse(rsp)
}

// ListFilesWithResponse request returning *ListFilesResponse
func (c *ClientWithResponses) ListFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFilesResponse, error) {
	rsp, err := c.ListFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFilesResponse(rsp)
}

// CreateFileWithBodyWithResponse request with arbitrary body returning *CreateFileResponse
func (c *ClientWithResponses) CreateFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFileResponse, error) {
	rsp, err := c.CreateFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFileResponse(rsp)
}

// DeleteFileWithResponse request returning *DeleteFileResponse
func (c *ClientWithResponses) DeleteFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error) {
	rsp, err := c.DeleteFile(ctx, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileResponse(rsp)
}

// RetrieveFileWithResponse request returning *RetrieveFileResponse
func (c *ClientWithResponses) RetrieveFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*RetrieveFileResponse, error) {
	rsp, err := c.RetrieveFile(ctx, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveFileResponse(rsp)
}

// DownloadFileWithResponse request returning *DownloadFileResponse
func (c *ClientWithResponses) DownloadFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*DownloadFileResponse, error) {
	rsp, err := c.DownloadFile(ctx, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadFileResponse(rsp)
}

// ListFineTunesWithResponse request returning *ListFineTunesResponse
func (c *ClientWithResponses) ListFineTunesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFineTunesResponse, error) {
	rsp, err := c.ListFineTunes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFineTunesResponse(rsp)
}

// CreateFineTuneWithBodyWithResponse request with arbitrary body returning *CreateFineTuneResponse
func (c *ClientWithResponses) CreateFineTuneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFineTuneResponse, error) {
	rsp, err := c.CreateFineTuneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFineTuneResponse(rsp)
}

func (c *ClientWithResponses) CreateFineTuneWithResponse(ctx context.Context, body CreateFineTuneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFineTuneResponse, error) {
	rsp, err := c.CreateFineTune(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFineTuneResponse(rsp)
}

// RetrieveFineTuneWithResponse request returning *RetrieveFineTuneResponse
func (c *ClientWithResponses) RetrieveFineTuneWithResponse(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*RetrieveFineTuneResponse, error) {
	rsp, err := c.RetrieveFineTune(ctx, fineTuneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveFineTuneResponse(rsp)
}

// CancelFineTuneWithResponse request returning *CancelFineTuneResponse
func (c *ClientWithResponses) CancelFineTuneWithResponse(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*CancelFineTuneResponse, error) {
	rsp, err := c.CancelFineTune(ctx, fineTuneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelFineTuneResponse(rsp)
}

// ListFineTuneEventsWithResponse request returning *ListFineTuneEventsResponse
func (c *ClientWithResponses) ListFineTuneEventsWithResponse(ctx context.Context, fineTuneId string, params *ListFineTuneEventsParams, reqEditors ...RequestEditorFn) (*ListFineTuneEventsResponse, error) {
	rsp, err := c.ListFineTuneEvents(ctx, fineTuneId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFineTuneEventsResponse(rsp)
}

// ListPaginatedFineTuningJobsWithResponse request returning *ListPaginatedFineTuningJobsResponse
func (c *ClientWithResponses) ListPaginatedFineTuningJobsWithResponse(ctx context.Context, params *ListPaginatedFineTuningJobsParams, reqEditors ...RequestEditorFn) (*ListPaginatedFineTuningJobsResponse, error) {
	rsp, err := c.ListPaginatedFineTuningJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPaginatedFineTuningJobsResponse(rsp)
}

// CreateFineTuningJobWithBodyWithResponse request with arbitrary body returning *CreateFineTuningJobResponse
func (c *ClientWithResponses) CreateFineTuningJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFineTuningJobResponse, error) {
	rsp, err := c.CreateFineTuningJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFineTuningJobResponse(rsp)
}

func (c *ClientWithResponses) CreateFineTuningJobWithResponse(ctx context.Context, body CreateFineTuningJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFineTuningJobResponse, error) {
	rsp, err := c.CreateFineTuningJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFineTuningJobResponse(rsp)
}

// RetrieveFineTuningJobWithResponse request returning *RetrieveFineTuningJobResponse
func (c *ClientWithResponses) RetrieveFineTuningJobWithResponse(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*RetrieveFineTuningJobResponse, error) {
	rsp, err := c.RetrieveFineTuningJob(ctx, fineTuningJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveFineTuningJobResponse(rsp)
}

// CancelFineTuningJobWithResponse request returning *CancelFineTuningJobResponse
func (c *ClientWithResponses) CancelFineTuningJobWithResponse(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*CancelFineTuningJobResponse, error) {
	rsp, err := c.CancelFineTuningJob(ctx, fineTuningJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelFineTuningJobResponse(rsp)
}

// ListFineTuningEventsWithResponse request returning *ListFineTuningEventsResponse
func (c *ClientWithResponses) ListFineTuningEventsWithResponse(ctx context.Context, fineTuningJobId string, params *ListFineTuningEventsParams, reqEditors ...RequestEditorFn) (*ListFineTuningEventsResponse, error) {
	rsp, err := c.ListFineTuningEvents(ctx, fineTuningJobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFineTuningEventsResponse(rsp)
}

// CreateImageEditWithBodyWithResponse request with arbitrary body returning *CreateImageEditResponse
func (c *ClientWithResponses) CreateImageEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageEditResponse, error) {
	rsp, err := c.CreateImageEditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageEditResponse(rsp)
}

// CreateImageWithBodyWithResponse request with arbitrary body returning *CreateImageResponse
func (c *ClientWithResponses) CreateImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageResponse, error) {
	rsp, err := c.CreateImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageResponse(rsp)
}

func (c *ClientWithResponses) CreateImageWithResponse(ctx context.Context, body CreateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateImageResponse, error) {
	rsp, err := c.CreateImage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageResponse(rsp)
}

// CreateImageVariationWithBodyWithResponse request with arbitrary body returning *CreateImageVariationResponse
func (c *ClientWithResponses) CreateImageVariationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageVariationResponse, error) {
	rsp, err := c.CreateImageVariationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageVariationResponse(rsp)
}

// ListModelsWithResponse request returning *ListModelsResponse
func (c *ClientWithResponses) ListModelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelsResponse, error) {
	rsp, err := c.ListModels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelsResponse(rsp)
}

// DeleteModelWithResponse request returning *DeleteModelResponse
func (c *ClientWithResponses) DeleteModelWithResponse(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error) {
	rsp, err := c.DeleteModel(ctx, model, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelResponse(rsp)
}

// RetrieveModelWithResponse request returning *RetrieveModelResponse
func (c *ClientWithResponses) RetrieveModelWithResponse(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*RetrieveModelResponse, error) {
	rsp, err := c.RetrieveModel(ctx, model, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveModelResponse(rsp)
}

// CreateModerationWithBodyWithResponse request with arbitrary body returning *CreateModerationResponse
func (c *ClientWithResponses) CreateModerationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModerationResponse, error) {
	rsp, err := c.CreateModerationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModerationResponse(rsp)
}

func (c *ClientWithResponses) CreateModerationWithResponse(ctx context.Context, body CreateModerationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModerationResponse, error) {
	rsp, err := c.CreateModeration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModerationResponse(rsp)
}

// ParseCreateTranscriptionResponse parses an HTTP response from a CreateTranscriptionWithResponse call
func ParseCreateTranscriptionResponse(rsp *http.Response) (*CreateTranscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTranscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTranscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTranslationResponse parses an HTTP response from a CreateTranslationWithResponse call
func ParseCreateTranslationResponse(rsp *http.Response) (*CreateTranslationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTranslationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTranslationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChatCompletionResponse parses an HTTP response from a CreateChatCompletionWithResponse call
func ParseCreateChatCompletionResponse(rsp *http.Response) (*CreateChatCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChatCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateChatCompletionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCompletionResponse parses an HTTP response from a CreateCompletionWithResponse call
func ParseCreateCompletionResponse(rsp *http.Response) (*CreateCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCompletionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEditResponse parses an HTTP response from a CreateEditWithResponse call
func ParseCreateEditResponse(rsp *http.Response) (*CreateEditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateEditResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEmbeddingResponse parses an HTTP response from a CreateEmbeddingWithResponse call
func ParseCreateEmbeddingResponse(rsp *http.Response) (*CreateEmbeddingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEmbeddingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateEmbeddingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFilesResponse parses an HTTP response from a ListFilesWithResponse call
func ParseListFilesResponse(rsp *http.Response) (*ListFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFileResponse parses an HTTP response from a CreateFileWithResponse call
func ParseCreateFileResponse(rsp *http.Response) (*CreateFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpenAIFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFileResponse parses an HTTP response from a DeleteFileWithResponse call
func ParseDeleteFileResponse(rsp *http.Response) (*DeleteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveFileResponse parses an HTTP response from a RetrieveFileWithResponse call
func ParseRetrieveFileResponse(rsp *http.Response) (*RetrieveFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpenAIFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadFileResponse parses an HTTP response from a DownloadFileWithResponse call
func ParseDownloadFileResponse(rsp *http.Response) (*DownloadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFineTunesResponse parses an HTTP response from a ListFineTunesWithResponse call
func ParseListFineTunesResponse(rsp *http.Response) (*ListFineTunesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFineTunesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFineTunesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFineTuneResponse parses an HTTP response from a CreateFineTuneWithResponse call
func ParseCreateFineTuneResponse(rsp *http.Response) (*CreateFineTuneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFineTuneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FineTune
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveFineTuneResponse parses an HTTP response from a RetrieveFineTuneWithResponse call
func ParseRetrieveFineTuneResponse(rsp *http.Response) (*RetrieveFineTuneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveFineTuneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FineTune
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelFineTuneResponse parses an HTTP response from a CancelFineTuneWithResponse call
func ParseCancelFineTuneResponse(rsp *http.Response) (*CancelFineTuneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelFineTuneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FineTune
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFineTuneEventsResponse parses an HTTP response from a ListFineTuneEventsWithResponse call
func ParseListFineTuneEventsResponse(rsp *http.Response) (*ListFineTuneEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFineTuneEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFineTuneEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPaginatedFineTuningJobsResponse parses an HTTP response from a ListPaginatedFineTuningJobsWithResponse call
func ParseListPaginatedFineTuningJobsResponse(rsp *http.Response) (*ListPaginatedFineTuningJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPaginatedFineTuningJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPaginatedFineTuningJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFineTuningJobResponse parses an HTTP response from a CreateFineTuningJobWithResponse call
func ParseCreateFineTuningJobResponse(rsp *http.Response) (*CreateFineTuningJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFineTuningJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FineTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveFineTuningJobResponse parses an HTTP response from a RetrieveFineTuningJobWithResponse call
func ParseRetrieveFineTuningJobResponse(rsp *http.Response) (*RetrieveFineTuningJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveFineTuningJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FineTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelFineTuningJobResponse parses an HTTP response from a CancelFineTuningJobWithResponse call
func ParseCancelFineTuningJobResponse(rsp *http.Response) (*CancelFineTuningJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelFineTuningJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FineTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFineTuningEventsResponse parses an HTTP response from a ListFineTuningEventsWithResponse call
func ParseListFineTuningEventsResponse(rsp *http.Response) (*ListFineTuningEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFineTuningEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFineTuningJobEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateImageEditResponse parses an HTTP response from a CreateImageEditWithResponse call
func ParseCreateImageEditResponse(rsp *http.Response) (*CreateImageEditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImageEditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateImageResponse parses an HTTP response from a CreateImageWithResponse call
func ParseCreateImageResponse(rsp *http.Response) (*CreateImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateImageVariationResponse parses an HTTP response from a CreateImageVariationWithResponse call
func ParseCreateImageVariationResponse(rsp *http.Response) (*CreateImageVariationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImageVariationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelsResponse parses an HTTP response from a ListModelsWithResponse call
func ParseListModelsResponse(rsp *http.Response) (*ListModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListModelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelResponse parses an HTTP response from a DeleteModelWithResponse call
func ParseDeleteModelResponse(rsp *http.Response) (*DeleteModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteModelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveModelResponse parses an HTTP response from a RetrieveModelWithResponse call
func ParseRetrieveModelResponse(rsp *http.Response) (*RetrieveModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateModerationResponse parses an HTTP response from a CreateModerationWithResponse call
func ParseCreateModerationResponse(rsp *http.Response) (*CreateModerationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateModerationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateModerationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Transcribes audio into the input language.
	// (POST /audio/transcriptions)
	CreateTranscription(ctx echo.Context) error
	// Translates audio into English.
	// (POST /audio/translations)
	CreateTranslation(ctx echo.Context) error
	// Creates a model response for the given chat conversation.
	// (POST /chat/completions)
	CreateChatCompletion(ctx echo.Context) error
	// Creates a completion for the provided prompt and parameters.
	// (POST /completions)
	CreateCompletion(ctx echo.Context) error
	// Creates a new edit for the provided input, instruction, and parameters.
	// (POST /edits)
	CreateEdit(ctx echo.Context) error
	// Creates an embedding vector representing the input text.
	// (POST /embeddings)
	CreateEmbedding(ctx echo.Context) error
	// Returns a list of files that belong to the user's organization.
	// (GET /files)
	ListFiles(ctx echo.Context) error
	// Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
	// (POST /files)
	CreateFile(ctx echo.Context) error
	// Delete a file.
	// (DELETE /files/{file_id})
	DeleteFile(ctx echo.Context, fileId string) error
	// Returns information about a specific file.
	// (GET /files/{file_id})
	RetrieveFile(ctx echo.Context, fileId string) error
	// Returns the contents of the specified file.
	// (GET /files/{file_id}/content)
	DownloadFile(ctx echo.Context, fileId string) error
	// List your organization's fine-tuning jobs
	// (GET /fine-tunes)
	ListFineTunes(ctx echo.Context) error
	// Creates a job that fine-tunes a specified model from a given dataset.
	//
	// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
	//
	// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
	// (POST /fine-tunes)
	CreateFineTune(ctx echo.Context) error
	// Gets info about the fine-tune job.
	//
	// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
	// (GET /fine-tunes/{fine_tune_id})
	RetrieveFineTune(ctx echo.Context, fineTuneId string) error
	// Immediately cancel a fine-tune job.
	// (POST /fine-tunes/{fine_tune_id}/cancel)
	CancelFineTune(ctx echo.Context, fineTuneId string) error
	// Get fine-grained status updates for a fine-tune job.
	// (GET /fine-tunes/{fine_tune_id}/events)
	ListFineTuneEvents(ctx echo.Context, fineTuneId string, params ListFineTuneEventsParams) error
	// List your organization's fine-tuning jobs
	// (GET /fine_tuning/jobs)
	ListPaginatedFineTuningJobs(ctx echo.Context, params ListPaginatedFineTuningJobsParams) error
	// Creates a job that fine-tunes a specified model from a given dataset.
	//
	// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (POST /fine_tuning/jobs)
	CreateFineTuningJob(ctx echo.Context) error
	// Get info about a fine-tuning job.
	//
	// [Learn more about fine-tuning](/docs/guides/fine-tuning)
	// (GET /fine_tuning/jobs/{fine_tuning_job_id})
	RetrieveFineTuningJob(ctx echo.Context, fineTuningJobId string) error
	// Immediately cancel a fine-tune job.
	// (POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel)
	CancelFineTuningJob(ctx echo.Context, fineTuningJobId string) error
	// Get status updates for a fine-tuning job.
	// (GET /fine_tuning/jobs/{fine_tuning_job_id}/events)
	ListFineTuningEvents(ctx echo.Context, fineTuningJobId string, params ListFineTuningEventsParams) error
	// Creates an edited or extended image given an original image and a prompt.
	// (POST /images/edits)
	CreateImageEdit(ctx echo.Context) error
	// Creates an image given a prompt.
	// (POST /images/generations)
	CreateImage(ctx echo.Context) error
	// Creates a variation of a given image.
	// (POST /images/variations)
	CreateImageVariation(ctx echo.Context) error
	// Lists the currently available models, and provides basic information about each one such as the owner and availability.
	// (GET /models)
	ListModels(ctx echo.Context) error
	// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
	// (DELETE /models/{model})
	DeleteModel(ctx echo.Context, model string) error
	// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
	// (GET /models/{model})
	RetrieveModel(ctx echo.Context, model string) error
	// Classifies if text violates OpenAI's Content Policy
	// (POST /moderations)
	CreateModeration(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateTranscription converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTranscription(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTranscription(ctx)
	return err
}

// CreateTranslation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTranslation(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTranslation(ctx)
	return err
}

// CreateChatCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) CreateChatCompletion(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateChatCompletion(ctx)
	return err
}

// CreateCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCompletion(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCompletion(ctx)
	return err
}

// CreateEdit converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEdit(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEdit(ctx)
	return err
}

// CreateEmbedding converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEmbedding(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEmbedding(ctx)
	return err
}

// ListFiles converts echo context to params.
func (w *ServerInterfaceWrapper) ListFiles(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListFiles(ctx)
	return err
}

// CreateFile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFile(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateFile(ctx)
	return err
}

// DeleteFile converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "file_id", runtime.ParamLocationPath, ctx.Param("file_id"), &fileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFile(ctx, fileId)
	return err
}

// RetrieveFile converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "file_id", runtime.ParamLocationPath, ctx.Param("file_id"), &fileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RetrieveFile(ctx, fileId)
	return err
}

// DownloadFile converts echo context to params.
func (w *ServerInterfaceWrapper) DownloadFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "file_id", runtime.ParamLocationPath, ctx.Param("file_id"), &fileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DownloadFile(ctx, fileId)
	return err
}

// ListFineTunes converts echo context to params.
func (w *ServerInterfaceWrapper) ListFineTunes(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListFineTunes(ctx)
	return err
}

// CreateFineTune converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFineTune(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateFineTune(ctx)
	return err
}

// RetrieveFineTune converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveFineTune(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fine_tune_id" -------------
	var fineTuneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, ctx.Param("fine_tune_id"), &fineTuneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fine_tune_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RetrieveFineTune(ctx, fineTuneId)
	return err
}

// CancelFineTune converts echo context to params.
func (w *ServerInterfaceWrapper) CancelFineTune(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fine_tune_id" -------------
	var fineTuneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, ctx.Param("fine_tune_id"), &fineTuneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fine_tune_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CancelFineTune(ctx, fineTuneId)
	return err
}

// ListFineTuneEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListFineTuneEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fine_tune_id" -------------
	var fineTuneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, ctx.Param("fine_tune_id"), &fineTuneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fine_tune_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFineTuneEventsParams
	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", ctx.QueryParams(), &params.Stream)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stream: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListFineTuneEvents(ctx, fineTuneId, params)
	return err
}

// ListPaginatedFineTuningJobs converts echo context to params.
func (w *ServerInterfaceWrapper) ListPaginatedFineTuningJobs(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaginatedFineTuningJobsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPaginatedFineTuningJobs(ctx, params)
	return err
}

// CreateFineTuningJob converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFineTuningJob(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateFineTuningJob(ctx)
	return err
}

// RetrieveFineTuningJob converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveFineTuningJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, ctx.Param("fine_tuning_job_id"), &fineTuningJobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fine_tuning_job_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RetrieveFineTuningJob(ctx, fineTuningJobId)
	return err
}

// CancelFineTuningJob converts echo context to params.
func (w *ServerInterfaceWrapper) CancelFineTuningJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, ctx.Param("fine_tuning_job_id"), &fineTuningJobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fine_tuning_job_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CancelFineTuningJob(ctx, fineTuningJobId)
	return err
}

// ListFineTuningEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListFineTuningEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fine_tuning_job_id" -------------
	var fineTuningJobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, ctx.Param("fine_tuning_job_id"), &fineTuningJobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fine_tuning_job_id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFineTuningEventsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListFineTuningEvents(ctx, fineTuningJobId, params)
	return err
}

// CreateImageEdit converts echo context to params.
func (w *ServerInterfaceWrapper) CreateImageEdit(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateImageEdit(ctx)
	return err
}

// CreateImage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateImage(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateImage(ctx)
	return err
}

// CreateImageVariation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateImageVariation(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateImageVariation(ctx)
	return err
}

// ListModels converts echo context to params.
func (w *ServerInterfaceWrapper) ListModels(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListModels(ctx)
	return err
}

// DeleteModel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteModel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithLocation("simple", false, "model", runtime.ParamLocationPath, ctx.Param("model"), &model)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter model: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteModel(ctx, model)
	return err
}

// RetrieveModel converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveModel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithLocation("simple", false, "model", runtime.ParamLocationPath, ctx.Param("model"), &model)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter model: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RetrieveModel(ctx, model)
	return err
}

// CreateModeration converts echo context to params.
func (w *ServerInterfaceWrapper) CreateModeration(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateModeration(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio/transcriptions", wrapper.CreateTranscription)
	router.POST(baseURL+"/audio/translations", wrapper.CreateTranslation)
	router.POST(baseURL+"/chat/completions", wrapper.CreateChatCompletion)
	router.POST(baseURL+"/completions", wrapper.CreateCompletion)
	router.POST(baseURL+"/edits", wrapper.CreateEdit)
	router.POST(baseURL+"/embeddings", wrapper.CreateEmbedding)
	router.GET(baseURL+"/files", wrapper.ListFiles)
	router.POST(baseURL+"/files", wrapper.CreateFile)
	router.DELETE(baseURL+"/files/:file_id", wrapper.DeleteFile)
	router.GET(baseURL+"/files/:file_id", wrapper.RetrieveFile)
	router.GET(baseURL+"/files/:file_id/content", wrapper.DownloadFile)
	router.GET(baseURL+"/fine-tunes", wrapper.ListFineTunes)
	router.POST(baseURL+"/fine-tunes", wrapper.CreateFineTune)
	router.GET(baseURL+"/fine-tunes/:fine_tune_id", wrapper.RetrieveFineTune)
	router.POST(baseURL+"/fine-tunes/:fine_tune_id/cancel", wrapper.CancelFineTune)
	router.GET(baseURL+"/fine-tunes/:fine_tune_id/events", wrapper.ListFineTuneEvents)
	router.GET(baseURL+"/fine_tuning/jobs", wrapper.ListPaginatedFineTuningJobs)
	router.POST(baseURL+"/fine_tuning/jobs", wrapper.CreateFineTuningJob)
	router.GET(baseURL+"/fine_tuning/jobs/:fine_tuning_job_id", wrapper.RetrieveFineTuningJob)
	router.POST(baseURL+"/fine_tuning/jobs/:fine_tuning_job_id/cancel", wrapper.CancelFineTuningJob)
	router.GET(baseURL+"/fine_tuning/jobs/:fine_tuning_job_id/events", wrapper.ListFineTuningEvents)
	router.POST(baseURL+"/images/edits", wrapper.CreateImageEdit)
	router.POST(baseURL+"/images/generations", wrapper.CreateImage)
	router.POST(baseURL+"/images/variations", wrapper.CreateImageVariation)
	router.GET(baseURL+"/models", wrapper.ListModels)
	router.DELETE(baseURL+"/models/:model", wrapper.DeleteModel)
	router.GET(baseURL+"/models/:model", wrapper.RetrieveModel)
	router.POST(baseURL+"/moderations", wrapper.CreateModeration)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
